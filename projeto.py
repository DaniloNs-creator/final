import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import tempfile
import gc
from concurrent.futures import ThreadPoolExecutor
import multiprocessing
import psutil
import traceback
from io import BytesIO

# --- CONFIGURA√á√ÉO INICIAL ---
st.set_page_config(
    page_title="Sistema de Processamento Massivo",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configura√ß√µes
BATCH_SIZE = 1000
MAX_WORKERS = min(multiprocessing.cpu_count(), 8)
MEMORY_THRESHOLD = 85

# --- FUN√á√ÉO SLIDER SEGURA ---
def create_safe_slider(df, column, label, default_range=None):
    """
    Cria um slider com verifica√ß√£o de valores m√≠nimos e m√°ximos
    """
    try:
        if df.empty or column not in df.columns:
            return None
            
        min_val = float(df[column].min())
        max_val = float(df[column].max())
        
        # Verifica se os valores s√£o v√°lidos
        if min_val == max_val:
            st.warning(f"‚ö†Ô∏è A coluna '{column}' possui apenas um valor √∫nico: {min_val}")
            return (min_val, max_val)
        
        if min_val > max_val:
            min_val, max_val = max_val, min_val
        
        # Define valores padr√£o seguros
        if default_range is None:
            default_range = (min_val, max_val)
        else:
            default_low = max(min_val, default_range[0])
            default_high = min(max_val, default_range[1])
            default_range = (default_low, default_high)
        
        return st.slider(
            label=label,
            min_value=min_val,
            max_value=max_val,
            value=default_range,
            step=(max_val - min_val) / 100 if (max_val - min_val) > 0 else 0.1
        )
        
    except Exception as e:
        st.error(f"Erro ao criar slider para {column}: {str(e)}")
        return None

# --- PROCESSADOR CT-E CORRIGIDO ---
def processador_cte_corrigido():
    st.title("üöö Processador de CT-e para Grandes Volumes")
    
    # Simula√ß√£o de dados para demonstra√ß√£o
    if 'cte_data' not in st.session_state:
        # Dados de exemplo - substitua pelos seus dados reais
        np.random.seed(42)
        n_records = 1000
        
        st.session_state.cte_data = pd.DataFrame({
            'Arquivo': [f'cte_{i}.xml' for i in range(n_records)],
            'nCT': [f'41190600000000{i:03d}' for i in range(n_records)],
            'Data Emiss√£o': pd.date_range('2024-01-01', periods=n_records, freq='D').strftime('%d/%m/%y'),
            'UF In√≠cio': np.random.choice(['SP', 'RJ', 'MG', 'RS', 'PR'], n_records),
            'UF Fim': np.random.choice(['SP', 'RJ', 'MG', 'RS', 'PR'], n_records),
            'Emitente': [f'Emitente {i}' for i in range(n_records)],
            'Valor Presta√ß√£o': np.random.uniform(1000, 50000, n_records),
            'Peso Bruto (kg)': np.random.uniform(1000, 25000, n_records),
            'Tipo de Peso Encontrado': np.random.choice(['PESO BRUTO', 'PESO BASE DE CALCULO'], n_records),
            'Remetente': [f'Remetente {i}' for i in range(n_records)],
            'Destinat√°rio': [f'Destinat√°rio {i}' for i in range(n_records)]
        })
    
    df = st.session_state.cte_data
    
    # --- ABA DE VISUALIZA√á√ÉO CORRIGIDA ---
    st.header("üìä Dados Processados")
    st.write(f"Total de CT-es processados: {len(df)}")
    
    # Filtros seguros
    col1, col2 = st.columns(2)
    
    with col1:
        uf_options = df['UF In√≠cio'].unique().tolist()
        uf_filter = st.multiselect(
            "Filtrar por UF In√≠cio", 
            options=uf_options,
            default=uf_options[:2] if len(uf_options) > 1 else uf_options
        )
    
    with col2:
        tipo_peso_options = df['Tipo de Peso Encontrado'].unique().tolist()
        tipo_peso_filter = st.multiselect(
            "Filtrar por Tipo de Peso", 
            options=tipo_peso_options,
            default=tipo_peso_options
        )
    
    # Aplica filtros multiselect
    filtered_df = df.copy()
    
    if uf_filter:
        filtered_df = filtered_df[filtered_df['UF In√≠cio'].isin(uf_filter)]
    
    if tipo_peso_filter:
        filtered_df = filtered_df[filtered_df['Tipo de Peso Encontrado'].isin(tipo_peso_filter)]
    
    # --- SLIDER SEGURO PARA PESO ---
    st.subheader("üîß Filtro por Peso Bruto (Corrigido)")
    
    if not filtered_df.empty:
        # Verifica se temos dados ap√≥s os filtros
        peso_min = float(filtered_df['Peso Bruto (kg)'].min())
        peso_max = float(filtered_df['Peso Bruto (kg)'].max())
        
        # Crit√©rio para determinar se usa slider ou n√£o
        use_slider = (peso_max - peso_min) > 0.001  # Margem de toler√¢ncia
        
        if use_slider:
            peso_filter = create_safe_slider(
                filtered_df, 
                'Peso Bruto (kg)', 
                "Selecione a faixa de peso (kg)",
                default_range=(peso_min, peso_max)
            )
            
            if peso_filter:
                filtered_df = filtered_df[
                    (filtered_df['Peso Bruto (kg)'] >= peso_filter[0]) & 
                    (filtered_df['Peso Bruto (kg)'] <= peso_filter[1])
                ]
        else:
            st.info(f"‚ÑπÔ∏è Faixa de peso limitada: {peso_min:.2f} kg")
            filtered_df = filtered_df[filtered_df['Peso Bruto (kg)'] >= peso_min]
    
    # Exibe dataframe com verifica√ß√£o de dados
    if not filtered_df.empty:
        st.success(f"‚úÖ {len(filtered_df)} registros ap√≥s filtros")
        
        colunas_principais = [
            'Arquivo', 'nCT', 'Data Emiss√£o', 'Emitente', 
            'UF In√≠cio', 'UF Fim', 'Peso Bruto (kg)', 
            'Tipo de Peso Encontrado', 'Valor Presta√ß√£o'
        ]
        
        # Sele√ß√£o de colunas para exibi√ß√£o
        colunas_selecionadas = st.multiselect(
            "Selecione as colunas para exibir:",
            options=colunas_principais,
            default=colunas_principais
        )
        
        if colunas_selecionadas:
            st.dataframe(filtered_df[colunas_selecionadas], use_container_width=True)
        
        # Estat√≠sticas
        st.subheader("üìà Estat√≠sticas")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total Valor", f"R$ {filtered_df['Valor Presta√ß√£o'].sum():,.2f}")
        
        with col2:
            st.metric("Peso Total", f"{filtered_df['Peso Bruto (kg)'].sum():,.0f} kg")
        
        with col3:
            avg_peso = filtered_df['Peso Bruto (kg)'].mean()
            st.metric("M√©dia Peso", f"{avg_peso:,.0f} kg")
        
        with col4:
            st.metric("CT-es V√°lidos", len(filtered_df))
        
        # Gr√°ficos condicionais
        if len(filtered_df) > 1:  # S√≥ exibe gr√°ficos se houver dados suficientes
            st.subheader("üìä Visualiza√ß√µes")
            
            col_chart1, col_chart2 = st.columns(2)
            
            with col_chart1:
                try:
                    tipo_counts = filtered_df['Tipo de Peso Encontrado'].value_counts()
                    if len(tipo_counts) > 0:
                        fig_tipo = px.pie(
                            values=tipo_counts.values,
                            names=tipo_counts.index,
                            title="Distribui√ß√£o por Tipo de Peso"
                        )
                        st.plotly_chart(fig_tipo, use_container_width=True)
                except Exception as e:
                    st.warning("N√£o foi poss√≠vel gerar o gr√°fico de distribui√ß√£o")
            
            with col_chart2:
                try:
                    if len(filtered_df) > 1:
                        fig_relacao = px.scatter(
                            filtered_df,
                            x='Peso Bruto (kg)',
                            y='Valor Presta√ß√£o',
                            title="Rela√ß√£o Peso x Valor",
                            color='Tipo de Peso Encontrado'
                        )
                        st.plotly_chart(fig_relacao, use_container_width=True)
                except Exception as e:
                    st.warning("N√£o foi poss√≠vel gerar o gr√°fico de rela√ß√£o")
        
    else:
        st.warning("‚ö†Ô∏è Nenhum dado encontrado com os filtros aplicados.")
        st.info("üí° Tente ajustar os filtros para visualizar os dados.")
    
    # --- ABA DE EXPORTA√á√ÉO ---
    st.header("üì• Exportar Dados")
    
    if not filtered_df.empty:
        export_format = st.radio(
            "Formato de exporta√ß√£o:",
            ["Parquet (Recomendado)", "Excel", "CSV"]
        )
        
        if st.button("üíæ Gerar Arquivo de Exporta√ß√£o"):
            try:
                if export_format == "Parquet (Recomendado)":
                    buffer = BytesIO()
                    filtered_df.to_parquet(buffer)
                    buffer.seek(0)
                    
                    st.download_button(
                        label="‚¨áÔ∏è Baixar Parquet",
                        data=buffer,
                        file_name="cte_dados.parquet",
                        mime="application/octet-stream"
                    )
                
                elif export_format == "Excel":
                    if len(filtered_df) <= 1000000:  # Limite do Excel
                        buffer = BytesIO()
                        with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                            filtered_df.to_excel(writer, index=False)
                        buffer.seek(0)
                        
                        st.download_button(
                            label="‚¨áÔ∏è Baixar Excel",
                            data=buffer,
                            file_name="cte_dados.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                    else:
                        st.error("Excel suporta apenas at√© 1.000.000 linhas. Use Parquet.")
                
                else:  # CSV
                    csv = filtered_df.to_csv(index=False).encode('utf-8')
                    st.download_button(
                        label="‚¨áÔ∏è Baixar CSV",
                        data=csv,
                        file_name="cte_dados.csv",
                        mime="text/csv"
                    )
                        
            except Exception as e:
                st.error(f"Erro na exporta√ß√£o: {str(e)}")
    
    # --- CONTROLES DE MANUTEN√á√ÉO ---
    st.sidebar.header("‚öôÔ∏è Controles do Sistema")
    
    if st.sidebar.button("üîÑ Limpar Filtros"):
        if 'cte_data' in st.session_state:
            st.session_state.cte_data = st.session_state.cte_data  # Restaura dados originais
        st.rerun()
    
    if st.sidebar.button("üßπ Limpar Cache"):
        keys_to_keep = ['cte_data']
        keys_to_remove = [key for key in st.session_state.keys() if key not in keys_to_keep]
        for key in keys_to_remove:
            del st.session_state[key]
        gc.collect()
        st.sidebar.success("Cache limpo!")
        time.sleep(1)
        st.rerun()
    
    # Informa√ß√µes do sistema
    st.sidebar.markdown("---")
    st.sidebar.subheader("üìä Status do Sistema")
    st.sidebar.write(f"Mem√≥ria usada: {psutil.virtual_memory().percent}%")
    st.sidebar.write(f"Registros totais: {len(df)}")
    st.sidebar.write(f"Registros filtrados: {len(filtered_df)}")

# --- CSS E ESTILO ---
def load_css():
    st.markdown("""
    <style>
        .main-header {
            font-size: 2.5rem;
            font-weight: 800;
            background: linear-gradient(90deg, #2c3e50, #3498db);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-align: center;
            margin: 1rem 0;
        }
        .metric-card {
            background: white;
            border-radius: 10px;
            padding: 1rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            margin: 0.5rem 0;
        }
        .warning-box {
            background-color: #fff3cd;
            border-left: 4px solid #ffc107;
            padding: 12px;
            margin: 10px 0;
            border-radius: 4px;
        }
    </style>
    """, unsafe_allow_html=True)

# --- APLICA√á√ÉO PRINCIPAL ---
def main():
    """Fun√ß√£o principal corrigida"""
    load_css()
    
    st.markdown('<div class="main-header">Sistema de Processamento Massivo de CT-e</div>', 
                unsafe_allow_html=True)
    
    try:
        processador_cte_corrigido()
    except Exception as e:
        st.error(f"‚ùå Erro cr√≠tico na aplica√ß√£o: {str(e)}")
        with st.expander("üîç Detalhes do erro"):
            st.code(traceback.format_exc())
        
        st.info("""
        **Solu√ß√µes poss√≠veis:**
        1. Recarregue a p√°gina (F5)
        2. Verifique os dados de entrada
        3. Limpe o cache do navegador
        """)

if __name__ == "__main__":
    import time
    main()