import streamlit as st
import chardet
from io import BytesIO
import pandas as pd
from datetime import datetime, timedelta
import sqlite3
import numpy as np
import plotly.express as px
import base64
from streamlit.components.v1 import html

# =============================================
# CONFIGURA√á√ÉO INICIAL
# =============================================

st.set_page_config(
    page_title="Sistema Fiscal H√ÑFELE",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# =============================================
# ESTILOS CSS
# =============================================

st.markdown("""
<style>
    :root {
        --primary-color: #1e3a8a;
        --primary-light: #3b82f6;
        --secondary-color: #f0f2f6;
        --success-color: #28a745;
        --warning-color: #ffc107;
        --danger-color: #dc3545;
        --dark-color: #343a40;
        --light-color: #f8f9fa;
    }
    
    .header-container {
        background: linear-gradient(135deg, var(--primary-color), var(--primary-light));
        color: white;
        padding: 2.5rem 2rem;
        border-radius: 0.75rem;
        margin-bottom: 2rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        text-align: center;
    }
    
    .card {
        background-color: white;
        border-radius: 0.75rem;
        padding: 1.75rem;
        margin-bottom: 1.75rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        border-left: 4px solid var(--primary-color);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
    }
    
    .status-badge {
        padding: 0.4rem 0.8rem;
        border-radius: 0.5rem;
        font-size: 0.875rem;
        font-weight: 600;
        display: inline-block;
        text-align: center;
        min-width: 100px;
    }
    
    .status-pendente {
        background-color: var(--warning-color);
        color: var(--dark-color);
    }
    
    .status-andamento {
        background-color: var(--primary-light);
        color: white;
    }
    
    .status-finalizado {
        background-color: var(--success-color);
        color: white;
    }
    
    .status-fechado {
        background-color: var(--light-color);
        color: var(--dark-color);
    }
    
    .stButton>button {
        background-color: var(--primary-color);
        color: white;
        border-radius: 0.5rem;
        padding: 0.75rem 1.5rem;
        transition: all 0.3s ease;
        font-weight: 600;
    }
    
    .stButton>button:hover {
        background-color: var(--primary-light);
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    
    .stTextInput>div>div>input,
    .stSelectbox>div>div>select,
    .stDateInput>div>div>input,
    .stTextArea>div>div>textarea {
        border-radius: 0.5rem !important;
        border: 1px solid #e5e7eb !important;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    
    .fade-in {
        animation: fadeIn 0.5s ease-in;
    }
</style>
""", unsafe_allow_html=True)

# =============================================
# FUN√á√ïES AUXILIARES
# =============================================

def show_notification(message, type="success"):
    """Exibe uma notifica√ß√£o tempor√°ria"""
    if type == "success":
        st.success(message)
    elif type == "error":
        st.error(message)
    elif type == "warning":
        st.warning(message)
    else:
        st.info(message)

def validate_cnpj(cnpj):
    """Valida se o CNPJ possui 14 d√≠gitos num√©ricos"""
    return len(cnpj) == 14 and cnpj.isdigit()

# =============================================
# M√ìDULO DE PROCESSAMENTO DE ARQUIVOS TXT
# =============================================

def txt_processor_module():
    st.markdown("""
    <div class="header-container fade-in">
        <h1>üìÑ Processador de Arquivos TXT</h1>
        <p>Ferramenta profissional para tratamento e otimiza√ß√£o de arquivos textuais</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div class="card fade-in">
        <h3>Instru√ß√µes de Uso</h3>
        <p>Esta ferramenta permite processar arquivos TXT removendo linhas indesejadas e realizando substitui√ß√µes autom√°ticas de termos t√©cnicos.</p>
        <p><strong>Passo a passo:</strong></p>
        <ol>
            <li>Selecione o arquivo TXT para processamento</li>
            <li>Configure os padr√µes de remo√ß√£o (opcional)</li>
            <li>Visualize o resultado e baixe o arquivo processado</li>
        </ol>
    </div>
    """, unsafe_allow_html=True)

    def detect_encoding(content):
        """Detecta a codifica√ß√£o do arquivo"""
        result = chardet.detect(content)
        return result['encoding']

    def process_file(content, patterns):
        """Processa o conte√∫do do arquivo aplicando as regras especificadas"""
        try:
            replacements = {
                "IMPOSTO IMPORTACAO": "IMP. IMPORTA√á√ÉO",
                "TAXA SICOMEX": "TX. SISCOMEX",
                "FRETE INTERNACIONAL": "FRETE INTERNAC.",
                "SEGURO INTERNACIONAL": "SEGURO INTERNAC."
            }
            
            encoding = detect_encoding(content)
            text = content.decode(encoding if encoding else 'latin-1')
            
            processed_lines = [
                line.strip() for line in text.splitlines()
                if not any(pattern in line for pattern in patterns)
            ]
            
            for original, replacement in replacements.items():
                processed_lines = [line.replace(original, replacement) for line in processed_lines]
            
            return "\n".join(processed_lines), len(text.splitlines())
        
        except Exception as e:
            show_notification(f"Erro durante o processamento: {str(e)}", "error")
            return None, 0

    default_patterns = ["-------", "SPED EFD-ICMS/IPI"]
    
    uploaded_file = st.file_uploader("Selecione o arquivo para processamento", type=['txt'], 
                                   help="Arquivos TXT com conte√∫do fiscal ou cont√°bil")
    
    with st.expander("üîß Configura√ß√µes Avan√ßadas", expanded=False):
        additional_patterns = st.text_input(
            "Padr√µes adicionais para remo√ß√£o (separados por v√≠rgula)",
            help="Exemplo: P√°gina 1, Total Geral, RESUMO"
        )
        
        patterns = default_patterns + [
            p.strip() for p in additional_patterns.split(",") 
            if p.strip()
        ] if additional_patterns else default_patterns

    if uploaded_file is not None:
        try:
            file_content = uploaded_file.read()
            result, original_lines = process_file(file_content, patterns)
            
            if result is not None:
                processed_lines = len(result.splitlines())
                
                st.markdown("""
                <div class="card">
                    <h4>Resultado do Processamento</h4>
                    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 1rem; margin: 1rem 0;">
                        <div style="background: #f8f9fa; padding: 1rem; border-radius: 0.5rem;">
                            <h5 style="margin: 0 0 0.5rem 0; color: var(--primary-color);">Linhas Originais</h5>
                            <p style="font-size: 1.5rem; margin: 0; font-weight: bold;">{:,}</p>
                        </div>
                        <div style="background: #f8f9fa; padding: 1rem; border-radius: 0.5rem;">
                            <h5 style="margin: 0 0 0.5rem 0; color: var(--primary-color);">Linhas Processadas</h5>
                            <p style="font-size: 1.5rem; margin: 0; font-weight: bold;">{:,}</p>
                        </div>
                        <div style="background: #f8f9fa; padding: 1rem; border-radius: 0.5rem;">
                            <h5 style="margin: 0 0 0.5rem 0; color: var(--primary-color);">Redu√ß√£o</h5>
                            <p style="font-size: 1.5rem; margin: 0; font-weight: bold;">{:,} ({:.1f}%)</p>
                        </div>
                    </div>
                </div>
                """.format(
                    original_lines, 
                    processed_lines, 
                    original_lines - processed_lines,
                    ((original_lines - processed_lines) / original_lines * 100) if original_lines else 0
                ), unsafe_allow_html=True)

                st.subheader("Pr√©via do Conte√∫do Processado")
                st.text_area("Visualiza√ß√£o", result, height=300, label_visibility="collapsed")

                output_buffer = BytesIO()
                output_buffer.write(result.encode('utf-8'))
                output_buffer.seek(0)
                
                st.download_button(
                    label="‚¨áÔ∏è Baixar Arquivo Processado",
                    data=output_buffer,
                    file_name=f"processed_{uploaded_file.name}",
                    mime="text/plain",
                    help="Clique para baixar o arquivo ap√≥s o processamento"
                )
        
        except Exception as e:
            show_notification(f"Erro inesperado: {str(e)}", "error")

# =============================================
# M√ìDULO DE LAN√áAMENTOS EFD REINF
# =============================================

def reinf_module():
    st.markdown("""
    <div class="header-container fade-in">
        <h1>üìä Sistema EFD-REINF</h1>
        <p>Gest√£o completa de eventos fiscais para o SPED Contribui√ß√µes</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div class="card fade-in">
        <h3>Funcionalidades Principais</h3>
        <ul>
            <li>Cadastro de notas fiscais de servi√ßos tomados</li>
            <li>C√°lculo autom√°tico de tributos (INSS, IRRF, PIS, COFINS, CSLL)</li>
            <li>Gera√ß√£o de arquivos para entrega (R-2010 e R-4020)</li>
            <li>Controle de prazos e obriga√ß√µes acess√≥rias</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)

    # Conex√£o com banco de dados
    conn = sqlite3.connect('fiscal_hefele.db')
    cursor = conn.cursor()
    
    # Criar tabela se n√£o existir
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS notas_fiscais (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            data TEXT NOT NULL,
            cnpj_tomador TEXT NOT NULL,
            cnpj_prestador TEXT NOT NULL,
            valor_servico REAL NOT NULL,
            descricao_servico TEXT,
            codigo_servico TEXT,
            aliquota_inss REAL DEFAULT 0,
            valor_inss REAL DEFAULT 0,
            retem_irrf INTEGER DEFAULT 0,
            aliquota_irrf REAL DEFAULT 0,
            valor_irrf REAL DEFAULT 0,
            retem_pis INTEGER DEFAULT 0,
            aliquota_pis REAL DEFAULT 0,
            valor_pis REAL DEFAULT 0,
            retem_cofins INTEGER DEFAULT 0,
            aliquota_cofins REAL DEFAULT 0,
            valor_cofins REAL DEFAULT 0,
            retem_csll INTEGER DEFAULT 0,
            aliquota_csll REAL DEFAULT 0,
            valor_csll REAL DEFAULT 0,
            data_cadastro TEXT DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    
    # Formul√°rio de cadastro
    with st.expander("‚ûï Cadastrar Nova Nota Fiscal", expanded=True):
        with st.form("nota_fiscal_form", clear_on_submit=True):
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("Dados da Nota Fiscal")
                invoice_date = st.date_input("Data de Emiss√£o*", format="DD/MM/YYYY")
                provider_cnpj = st.text_input("CNPJ Prestador*", max_chars=14, 
                                            help="Informe o CNPJ do prestador do servi√ßo (14 d√≠gitos)")
                receiver_cnpj = st.text_input("CNPJ Tomador*", max_chars=14,
                                            help="Informe o CNPJ da H√ÑFELE como tomadora (14 d√≠gitos)")
                service_value = st.number_input("Valor do Servi√ßo (R$)*", min_value=0.0, format="%.2f")
                service_description = st.text_input("Descri√ß√£o do Servi√ßo")
                service_code = st.text_input("C√≥digo do Servi√ßo (LC 116)")
            
            with col2:
                st.subheader("Tributos e Reten√ß√µes")
                
                st.markdown("**INSS**")
                inss_rate = st.slider("Al√≠quota INSS (%)", 0.0, 100.0, 4.5, 0.01, format="%.2f%%")
                inss_value = service_value * (inss_rate / 100)
                st.info(f"Valor a reter: R$ {inss_value:,.2f}")
                
                st.markdown("**IRRF**")
                irrf_retention = st.checkbox("Submeter √† reten√ß√£o de IRRF?")
                irrf_rate = st.slider("Al√≠quota IRRF (%)", 0.0, 100.0, 1.5, 0.01, 
                                     disabled=not irrf_retention, format="%.2f%%")
                irrf_value = service_value * (irrf_rate / 100) if irrf_retention else 0.0
                st.info(f"Valor a reter: R$ {irrf_value:,.2f}")
                
                st.markdown("**PIS**")
                pis_retention = st.checkbox("Submeter √† reten√ß√£o de PIS?")
                pis_rate = st.slider("Al√≠quota PIS (%)", 0.0, 100.0, 0.65, 0.01, 
                                   disabled=not pis_retention, format="%.2f%%")
                pis_value = service_value * (pis_rate / 100) if pis_retention else 0.0
                st.info(f"Valor a reter: R$ {pis_value:,.2f}")
                
                st.markdown("**COFINS**")
                cofins_retention = st.checkbox("Submeter √† reten√ß√£o de COFINS?")
                cofins_rate = st.slider("Al√≠quota COFINS (%)", 0.0, 100.0, 3.0, 0.01, 
                                      disabled=not cofins_retention, format="%.2f%%")
                cofins_value = service_value * (cofins_rate / 100) if cofins_retention else 0.0
                st.info(f"Valor a reter: R$ {cofins_value:,.2f}")
                
                st.markdown("**CSLL**")
                csll_retention = st.checkbox("Submeter √† reten√ß√£o de CSLL?")
                csll_rate = st.slider("Al√≠quota CSLL (%)", 0.0, 100.0, 1.0, 0.01, 
                                    disabled=not csll_retention, format="%.2f%%")
                csll_value = service_value * (csll_rate / 100) if csll_retention else 0.0
                st.info(f"Valor a reter: R$ {csll_value:,.2f}")
            
            if st.form_submit_button("Cadastrar Nota Fiscal"):
                if not validate_cnpj(provider_cnpj):
                    show_notification("CNPJ do prestador inv√°lido. Deve conter 14 d√≠gitos.", "error")
                elif not validate_cnpj(receiver_cnpj):
                    show_notification("CNPJ do tomador inv√°lido. Deve conter 14 d√≠gitos.", "error")
                elif service_value <= 0:
                    show_notification("O valor do servi√ßo deve ser maior que zero.", "error")
                else:
                    try:
                        cursor.execute('''
                            INSERT INTO notas_fiscais (
                                data, cnpj_tomador, cnpj_prestador, valor_servico, descricao_servico, codigo_servico,
                                aliquota_inss, valor_inss, retem_irrf, aliquota_irrf, valor_irrf,
                                retem_pis, aliquota_pis, valor_pis, retem_cofins, aliquota_cofins, valor_cofins,
                                retem_csll, aliquota_csll, valor_csll
                            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        ''', (
                            invoice_date.strftime('%Y-%m-%d'), receiver_cnpj, provider_cnpj, service_value, 
                            service_description, service_code, inss_rate, inss_value, int(irrf_retention), 
                            irrf_rate, irrf_value, int(pis_retention), pis_rate, pis_value, 
                            int(cofins_retention), cofins_rate, cofins_value, int(csll_retention), 
                            csll_rate, csll_value
                        ))
                        conn.commit()
                        show_notification("Nota fiscal cadastrada com sucesso!", "success")
                    except Exception as e:
                        show_notification(f"Erro ao cadastrar nota: {str(e)}", "error")

    # Listagem de notas cadastradas
    st.subheader("Notas Fiscais Cadastradas")
    df_invoices = pd.read_sql_query("SELECT * FROM notas_fiscais ORDER BY data DESC", conn)
    
    if not df_invoices.empty:
        # Formata√ß√£o dos dados para exibi√ß√£o
        df_display = df_invoices.copy()
        df_display['data'] = pd.to_datetime(df_display['data']).dt.strftime('%d/%m/%Y')
        df_display['valor_servico'] = df_display['valor_servico'].map('R$ {:,.2f}'.format)
        
        # Sele√ß√£o de colunas para exibi√ß√£o
        display_columns = [
            'data', 'cnpj_prestador', 'cnpj_tomador', 'valor_servico',
            'descricao_servico', 'codigo_servico'
        ]
        
        st.dataframe(
            df_display[display_columns],
            use_container_width=True,
            hide_index=True,
            column_config={
                "data": "Data",
                "cnpj_prestador": "CNPJ Prestador",
                "cnpj_tomador": "CNPJ Tomador",
                "valor_servico": "Valor do Servi√ßo",
                "descricao_servico": "Descri√ß√£o",
                "codigo_servico": "C√≥digo"
            }
        )
        
        # Gera√ß√£o do arquivo EFD-REINF
        st.subheader("Gerar Arquivo para Entrega")
        
        if st.button("üîÑ Gerar Arquivo EFD-REINF"):
            try:
                # C√°lculo dos totais
                totals = {
                    'inss': df_invoices['valor_inss'].sum(),
                    'irrf': df_invoices['valor_irrf'].sum(),
                    'pis': df_invoices['valor_pis'].sum(),
                    'cofins': df_invoices['valor_cofins'].sum(),
                    'csll': df_invoices['valor_csll'].sum()
                }
                
                # Cria√ß√£o do conte√∫do do arquivo
                file_content = [
                    "|EFDREINF|0100|1|",
                    "|0001|1|12345678901234|HAFELE BRASIL|12345678|||A|12345678901|fiscal@hafele.com|",
                    "|0100|Respons√°vel Fiscal|12345678901|Rua H√ÑFELE, 100|3100000||99999999|contabilidade@hafele.com|"
                ]
                
                # Adiciona registros R-2010
                for idx, row in df_invoices.iterrows():
                    file_content.append(
                        f"|2010|{idx+1}|{row['cnpj_tomador']}|{row['cnpj_prestador']}|"
                        f"{row['data'].replace('-', '')}|{row['codigo_servico']}|"
                        f"{row['valor_servico']:.2f}|{row['aliquota_inss']:.2f}|"
                        f"{row['valor_inss']:.2f}|"
                    )
                
                # Adiciona registro R-4020
                file_content.append(
                    f"|4020|1|{datetime.now().strftime('%Y%m')}|"
                    f"{totals['inss']:.2f}|{totals['irrf']:.2f}|"
                    f"{totals['pis']:.2f}|{totals['cofins']:.2f}|"
                    f"{totals['csll']:.2f}|1|"
                )
                
                # Finaliza o arquivo
                file_content.extend([
                    "|9001|1|",
                    f"|9900|EFDREINF|{len(file_content) - 3}|",
                    "|9999|7|"
                ])
                
                final_content = "\n".join(file_content)
                
                # Cria o bot√£o de download
                st.download_button(
                    label="‚¨áÔ∏è Baixar Arquivo EFD-REINF",
                    data=final_content.encode('utf-8'),
                    file_name=f"EFDREINF_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                    mime="text/plain"
                )
                
                # Exibe os totais
                st.markdown("""
                <div class="card">
                    <h4>Resumo de Reten√ß√µes</h4>
                    <div style="display: grid; grid-template-columns: repeat(5, 1fr); gap: 1rem; margin-top: 1rem;">
                        <div style="background: #e8f5e9; padding: 1rem; border-radius: 0.5rem;">
                            <p style="margin: 0 0 0.25rem 0; font-weight: bold; color: var(--success-color);">INSS</p>
                            <p style="margin: 0; font-size: 1.25rem;">R$ {:.2f}</p>
                        </div>
                        <div style="background: #e8f5e9; padding: 1rem; border-radius: 0.5rem;">
                            <p style="margin: 0 0 0.25rem 0; font-weight: bold; color: var(--success-color);">IRRF</p>
                            <p style="margin: 0; font-size: 1.25rem;">R$ {:.2f}</p>
                        </div>
                        <div style="background: #e8f5e9; padding: 1rem; border-radius: 0.5rem;">
                            <p style="margin: 0 0 0.25rem 0; font-weight: bold; color: var(--success-color);">PIS</p>
                            <p style="margin: 0; font-size: 1.25rem;">R$ {:.2f}</p>
                        </div>
                        <div style="background: #e8f5e9; padding: 1rem; border-radius: 0.5rem;">
                            <p style="margin: 0 0 0.25rem 0; font-weight: bold; color: var(--success-color);">COFINS</p>
                            <p style="margin: 0; font-size: 1.25rem;">R$ {:.2f}</p>
                        </div>
                        <div style="background: #e8f5e9; padding: 1rem; border-radius: 0.5rem;">
                            <p style="margin: 0 0 0.25rem 0; font-weight: bold; color: var(--success-color);">CSLL</p>
                            <p style="margin: 0; font-size: 1.25rem;">R$ {:.2f}</p>
                        </div>
                    </div>
                </div>
                """.format(
                    totals['inss'], totals['irrf'], totals['pis'], 
                    totals['cofins'], totals['csll']
                ), unsafe_allow_html=True)
                
            except Exception as e:
                show_notification(f"Erro ao gerar arquivo: {str(e)}", "error")
    else:
        st.warning("Nenhuma nota fiscal cadastrada at√© o momento.")
    
    conn.close()

# =============================================
# M√ìDULO DE ATIVIDADES FISCAIS
# =============================================

def fiscal_activities_module():
    st.markdown("""
    <div class="header-container fade-in">
        <h1>üìÖ Gest√£o de Obriga√ß√µes Fiscais</h1>
        <p>Controle completo das atividades e prazos do departamento fiscal</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.warning("""
    **M√≥dulo em Desenvolvimento**
    
    Esta funcionalidade est√° sendo desenvolvida e estar√° dispon√≠vel em breve. 
    Entre em contato com o departamento de TI para mais informa√ß√µes.
    """)

# =============================================
# P√ÅGINA INICIAL
# =============================================

def home_page():
    st.markdown("""
    <div class="header-container fade-in">
        <h1>Sistema Fiscal H√ÑFELE</h1>
        <p>Solu√ß√£o integrada para gest√£o de processos fiscais e cont√°beis</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div class="card fade-in">
        <h2>Bem-vindo ao Sistema Fiscal</h2>
        <p>Esta plataforma foi desenvolvida para otimizar e automatizar os processos fiscais da H√ÑFELE Brasil, 
        garantindo conformidade com a legisla√ß√£o e efici√™ncia operacional.</p>
        
        <h3 style="margin-top: 1.5rem;">M√≥dulos Dispon√≠veis</h3>
        <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 1.5rem; margin-top: 1rem;">
            <div style="background: #f8f9fa; padding: 1.5rem; border-radius: 0.75rem; text-align: center;">
                <h4 style="margin: 0 0 0.5rem 0; color: var(--primary-color);">Processador TXT</h4>
                <p style="margin: 0;">Ferramenta para tratamento de arquivos textuais</p>
            </div>
            <div style="background: #f8f9fa; padding: 1.5rem; border-radius: 0.75rem; text-align: center;">
                <h4 style="margin: 0 0 0.5rem 0; color: var(--primary-color);">EFD-REINF</h4>
                <p style="margin: 0;">Gest√£o de eventos do SPED Contribui√ß√µes</p>
            </div>
            <div style="background: #f8f9fa; padding: 1.5rem; border-radius: 0.75rem; text-align: center;">
                <h4 style="margin: 0 0 0.5rem 0; color: var(--primary-color);">Obriga√ß√µes Fiscais</h4>
                <p style="margin: 0;">Controle de prazos e atividades (em breve)</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìÑ Acessar Processador TXT", use_container_width=True):
            st.session_state.current_page = "txt_processor"
    
    with col2:
        if st.button("üìä Acessar EFD-REINF", use_container_width=True):
            st.session_state.current_page = "reinf"
    
    with col3:
        if st.button("üìÖ Acessar Obriga√ß√µes", use_container_width=True):
            st.session_state.current_page = "fiscal_activities"

# =============================================
# CONTROLE PRINCIPAL
# =============================================

def main():
    # Inicializa o estado da sess√£o
    if 'current_page' not in st.session_state:
        st.session_state.current_page = None
    
    # Renderiza a p√°gina atual
    if st.session_state.current_page is None:
        home_page()
    else:
        # Bot√£o de retorno
        if st.button("‚Üê Voltar ao Menu Principal"):
            st.session_state.current_page = None
            st.rerun()
        
        # Renderiza o m√≥dulo selecionado
        if st.session_state.current_page == "txt_processor":
            txt_processor_module()
        elif st.session_state.current_page == "reinf":
            reinf_module()
        elif st.session_state.current_page == "fiscal_activities":
            fiscal_activities_module()

if __name__ == "__main__":
    main()
