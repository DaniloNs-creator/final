import streamlit as st
import chardet
from io import BytesIO
import pandas as pd
from datetime import datetime
import base64

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema Fiscal",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun√ß√£o para mostrar a tela inicial
def mostrar_tela_inicial():
    st.markdown("""
    <div style="text-align:center; padding:50px">
        <h1 style="font-size:48px">Bem vindo ao sistema fiscal</h1>
    </div>
    """, unsafe_allow_html=True)

# Processador de Arquivos TXT
def processador_txt():
    st.title("üìÑ Processador de Arquivos TXT")
    st.markdown("""
    Remova linhas indesejadas de arquivos TXT. Carregue seu arquivo e defina os padr√µes a serem removidos.
    """)

    def detectar_encoding(conteudo):
        """Detecta o encoding do conte√∫do do arquivo"""
        resultado = chardet.detect(conteudo)
        return resultado['encoding']

    def processar_arquivo(conteudo, padroes):
        """
        Processa o conte√∫do do arquivo removendo linhas indesejadas e realizando substitui√ß√µes
        """
        try:
            # Dicion√°rio de substitui√ß√µes
            substituicoes = {
                "IMPOSTO IMPORTACAO": "IMP IMPORT",
                "TAXA SICOMEX": "TX SISCOMEX",
                "FRETE INTERNACIONAL": "FRET INTER",
                "SEGURO INTERNACIONAL": "SEG INTERN"
            }
            
            # Detecta o encoding
            encoding = detectar_encoding(conteudo)
            
            # Decodifica o conte√∫do
            try:
                texto = conteudo.decode(encoding)
            except UnicodeDecodeError:
                texto = conteudo.decode('latin-1')
            
            # Processa as linhas
            linhas = texto.splitlines()
            linhas_processadas = []
            
            for linha in linhas:
                linha = linha.strip()
                # Verifica se a linha cont√©m algum padr√£o a ser removido
                if not any(padrao in linha for padrao in padroes):
                    # Aplica as substitui√ß√µes
                    for original, substituto in substituicoes.items():
                        linha = linha.replace(original, substituto)
                    linhas_processadas.append(linha)
            
            return "\n".join(linhas_processadas), len(linhas)
        
        except Exception as e:
            st.error(f"Erro ao processar o arquivo: {str(e)}")
            return None, 0

    # Padr√µes padr√£o para remo√ß√£o
    padroes_default = ["-------", "SPED EFD-ICMS/IPI"]
    
    # Upload do arquivo
    arquivo = st.file_uploader("Selecione o arquivo TXT", type=['txt'])
    
    # Op√ß√µes avan√ßadas
    with st.expander("‚öôÔ∏è Configura√ß√µes avan√ßadas"):
        padroes_adicionais = st.text_input(
            "Padr√µes adicionais para remo√ß√£o (separados por v√≠rgula)",
            help="Exemplo: padr√£o1, padr√£o2, padr√£o3"
        )
        
        padroes = padroes_default + [
            p.strip() for p in padroes_adicionais.split(",") 
            if p.strip()
        ] if padroes_adicionais else padroes_default

    if arquivo is not None:
        try:
            # L√™ o conte√∫do do arquivo
            conteudo = arquivo.read()
            
            # Processa o arquivo
            resultado, total_linhas = processar_arquivo(conteudo, padroes)
            
            if resultado is not None:
                # Mostra estat√≠sticas
                linhas_processadas = len(resultado.splitlines())
                st.success(f"""
                **Processamento conclu√≠do!**  
                ‚úîÔ∏è Linhas originais: {total_linhas}  
                ‚úîÔ∏è Linhas processadas: {linhas_processadas}  
                ‚úîÔ∏è Linhas removidas: {total_linhas - linhas_processadas}
                """)

                # Pr√©via do resultado
                st.subheader("Pr√©via do resultado")
                st.text_area("Conte√∫do processado", resultado, height=300)

                # Bot√£o de download
                buffer = BytesIO()
                buffer.write(resultado.encode('utf-8'))
                buffer.seek(0)
                
                st.download_button(
                    label="‚¨áÔ∏è Baixar arquivo processado",
                    data=buffer,
                    file_name=f"processado_{arquivo.name}",
                    mime="text/plain"
                )
        
        except Exception as e:
            st.error(f"Erro inesperado: {str(e)}")
            st.info("Tente novamente ou verifique o arquivo.")

# M√≥dulo de Lan√ßamentos EFD REINF com R4020 completo
def lancamentos_efd_reinf():
    st.title("üìä Lan√ßamentos EFD REINF")
    st.markdown("""
    Sistema para lan√ßamento de notas fiscais de servi√ßo tomados e gera√ß√£o de arquivos R2010 e R4020 (com IRRF, PIS, COFINS e CSLL).
    """)
    
    # Inicializa o DataFrame na sess√£o se n√£o existir
    if 'notas_fiscais' not in st.session_state:
        st.session_state.notas_fiscais = pd.DataFrame(columns=[
            'Data', 'CNPJ Tomador', 'CNPJ Prestador', 'Valor Servi√ßo', 
            'Descri√ß√£o Servi√ßo', 'C√≥digo Servi√ßo', 
            'Al√≠quota INSS', 'Valor INSS',
            'Ret√©m IRRF', 'Al√≠quota IRRF', 'Valor IRRF',
            'Ret√©m PIS', 'Al√≠quota PIS', 'Valor PIS',
            'Ret√©m COFINS', 'Al√≠quota COFINS', 'Valor COFINS',
            'Ret√©m CSLL', 'Al√≠quota CSLL', 'Valor CSLL'
        ])
    
    # Formul√°rio para adicionar nova nota fiscal
    with st.expander("‚ûï Adicionar Nova Nota Fiscal", expanded=True):
        col1, col2 = st.columns(2)
        with col1:
            data = st.date_input("Data da Nota Fiscal")
            cnpj_tomador = st.text_input("CNPJ Tomador (14 d√≠gitos)", max_chars=14)
            cnpj_prestador = st.text_input("CNPJ Prestador (14 d√≠gitos)", max_chars=14)
            valor_servico = st.number_input("Valor do Servi√ßo (R$)", min_value=0.0, format="%.2f")
            descricao_servico = st.text_input("Descri√ß√£o do Servi√ßo")
            codigo_servico = st.text_input("C√≥digo do Servi√ßo (LC 116)")
        
        with col2:
            st.subheader("Tributos")
            
            # INSS
            st.markdown("**INSS**")
            aliquota_inss = st.slider("Al√≠quota INSS (%)", min_value=0.0, max_value=100.0, step=0.01, value=4.5, key='aliquota_inss')
            valor_inss = valor_servico * (aliquota_inss / 100)
            st.info(f"Valor INSS: R$ {valor_inss:.2f}")
            
            # IRRF
            st.markdown("**IRRF**")
            retem_irrf = st.checkbox("Ret√©m IRRF?", value=False, key='retem_irrf')
            aliquota_irrf = st.slider("Al√≠quota IRRF (%)", min_value=0.0, max_value=100.0, step=0.01, value=1.5, key='aliquota_irrf', disabled=not retem_irrf)
            valor_irrf = valor_servico * (aliquota_irrf / 100) if retem_irrf else 0.0
            st.info(f"Valor IRRF: R$ {valor_irrf:.2f}")
            
            # PIS
            st.markdown("**PIS**")
            retem_pis = st.checkbox("Ret√©m PIS?", value=False, key='retem_pis')
            aliquota_pis = st.slider("Al√≠quota PIS (%)", min_value=0.0, max_value=100.0, step=0.01, value=0.65, key='aliquota_pis', disabled=not retem_pis)
            valor_pis = valor_servico * (aliquota_pis / 100) if retem_pis else 0.0
            st.info(f"Valor PIS: R$ {valor_pis:.2f}")
            
            # COFINS
            st.markdown("**COFINS**")
            retem_cofins = st.checkbox("Ret√©m COFINS?", value=False, key='retem_cofins')
            aliquota_cofins = st.slider("Al√≠quota COFINS (%)", min_value=0.0, max_value=100.0, step=0.01, value=3.0, key='aliquota_cofins', disabled=not retem_cofins)
            valor_cofins = valor_servico * (aliquota_cofins / 100) if retem_cofins else 0.0
            st.info(f"Valor COFINS: R$ {valor_cofins:.2f}")
            
            # CSLL
            st.markdown("**CSLL**")
            retem_csll = st.checkbox("Ret√©m CSLL?", value=False, key='retem_csll')
            aliquota_csll = st.slider("Al√≠quota CSLL (%)", min_value=0.0, max_value=100.0, step=0.01, value=1.0, key='aliquota_csll', disabled=not retem_csll)
            valor_csll = valor_servico * (aliquota_csll / 100) if retem_csll else 0.0
            st.info(f"Valor CSLL: R$ {valor_csll:.2f}")
        
        if st.button("Adicionar Nota Fiscal"):
            nova_nota = {
                'Data': data.strftime('%d/%m/%Y'),
                'CNPJ Tomador': cnpj_tomador,
                'CNPJ Prestador': cnpj_prestador,
                'Valor Servi√ßo': valor_servico,
                'Descri√ß√£o Servi√ßo': descricao_servico,
                'C√≥digo Servi√ßo': codigo_servico,
                'Al√≠quota INSS': aliquota_inss,
                'Valor INSS': valor_inss,
                'Ret√©m IRRF': retem_irrf,
                'Al√≠quota IRRF': aliquota_irrf,
                'Valor IRRF': valor_irrf,
                'Ret√©m PIS': retem_pis,
                'Al√≠quota PIS': aliquota_pis,
                'Valor PIS': valor_pis,
                'Ret√©m COFINS': retem_cofins,
                'Al√≠quota COFINS': aliquota_cofins,
                'Valor COFINS': valor_cofins,
                'Ret√©m CSLL': retem_csll,
                'Al√≠quota CSLL': aliquota_csll,
                'Valor CSLL': valor_csll
            }
            
            # Convertendo o dicion√°rio para DataFrame e concatenando
            df_nova_nota = pd.DataFrame([nova_nota])
            st.session_state.notas_fiscais = pd.concat([st.session_state.notas_fiscais, df_nova_nota], ignore_index=True)
            st.success("Nota fiscal adicionada com sucesso!")
    
    # Visualiza√ß√£o das notas fiscais cadastradas
    st.subheader("Notas Fiscais Cadastradas")
    if not st.session_state.notas_fiscais.empty:
        # Mostra apenas as colunas principais na visualiza√ß√£o
        cols_principais = ['Data', 'CNPJ Tomador', 'CNPJ Prestador', 'Valor Servi√ßo', 'Descri√ß√£o Servi√ßo', 'C√≥digo Servi√ßo']
        st.dataframe(st.session_state.notas_fiscais[cols_principais])
        
        # Op√ß√µes para editar/excluir notas
        col1, col2 = st.columns(2)
        with col1:
            linha_editar = st.number_input("N√∫mero da linha para editar", min_value=0, max_value=len(st.session_state.notas_fiscais)-1, key='linha_editar')
            if st.button("Editar Linha"):
                st.session_state.editando = linha_editar
                
        with col2:
            linha_excluir = st.number_input("N√∫mero da linha para excluir", min_value=0, max_value=len(st.session_state.notas_fiscais)-1, key='linha_excluir')
            if st.button("Excluir Linha"):
                st.session_state.notas_fiscais = st.session_state.notas_fiscais.drop(index=linha_excluir).reset_index(drop=True)
                st.success("Linha exclu√≠da com sucesso!")
        
        # Formul√°rio de edi√ß√£o
        if 'editando' in st.session_state:
            with st.expander("‚úèÔ∏è Editar Nota Fiscal", expanded=True):
                nota_editar = st.session_state.notas_fiscais.iloc[st.session_state.editando]
                
                col1, col2 = st.columns(2)
                with col1:
                    data_edit = st.date_input("Data", value=datetime.strptime(nota_editar['Data'], '%d/%m/%Y'), key='data_edit')
                    cnpj_tomador_edit = st.text_input("CNPJ Tomador", value=nota_editar['CNPJ Tomador'], key='cnpj_tomador_edit')
                    cnpj_prestador_edit = st.text_input("CNPJ Prestador", value=nota_editar['CNPJ Prestador'], key='cnpj_prestador_edit')
                    valor_servico_edit = st.number_input("Valor do Servi√ßo (R$)", value=float(nota_editar['Valor Servi√ßo']), key='valor_servico_edit')
                    descricao_servico_edit = st.text_input("Descri√ß√£o do Servi√ßo", value=nota_editar['Descri√ß√£o Servi√ßo'], key='descricao_servico_edit')
                    codigo_servico_edit = st.text_input("C√≥digo do Servi√ßo", value=nota_editar['C√≥digo Servi√ßo'], key='codigo_servico_edit')
                
                with col2:
                    st.subheader("Tributos")
                    
                    # INSS
                    st.markdown("**INSS**")
                    aliquota_inss_edit = st.slider("Al√≠quota INSS (%)", min_value=0.0, max_value=100.0, step=0.01, 
                                                value=float(nota_editar['Al√≠quota INSS']), key='aliquota_inss_edit')
                    valor_inss_edit = valor_servico_edit * (aliquota_inss_edit / 100)
                    st.info(f"Valor INSS: R$ {valor_inss_edit:.2f}")
                    
                    # IRRF
                    st.markdown("**IRRF**")
                    retem_irrf_edit = st.checkbox("Ret√©m IRRF?", value=bool(nota_editar['Ret√©m IRRF']), key='retem_irrf_edit')
                    aliquota_irrf_edit = st.slider("Al√≠quota IRRF (%)", min_value=0.0, max_value=100.0, step=0.01, 
                                                  value=float(nota_editar['Al√≠quota IRRF']), key='aliquota_irrf_edit', disabled=not retem_irrf_edit)
                    valor_irrf_edit = valor_servico_edit * (aliquota_irrf_edit / 100) if retem_irrf_edit else 0.0
                    st.info(f"Valor IRRF: R$ {valor_irrf_edit:.2f}")
                    
                    # PIS
                    st.markdown("**PIS**")
                    retem_pis_edit = st.checkbox("Ret√©m PIS?", value=bool(nota_editar['Ret√©m PIS']), key='retem_pis_edit')
                    aliquota_pis_edit = st.slider("Al√≠quota PIS (%)", min_value=0.0, max_value=100.0, step=0.01, 
                                                value=float(nota_editar['Al√≠quota PIS']), key='aliquota_pis_edit', disabled=not retem_pis_edit)
                    valor_pis_edit = valor_servico_edit * (aliquota_pis_edit / 100) if retem_pis_edit else 0.0
                    st.info(f"Valor PIS: R$ {valor_pis_edit:.2f}")
                    
                    # COFINS
                    st.markdown("**COFINS**")
                    retem_cofins_edit = st.checkbox("Ret√©m COFINS?", value=bool(nota_editar['Ret√©m COFINS']), key='retem_cofins_edit')
                    aliquota_cofins_edit = st.slider("Al√≠quota COFINS (%)", min_value=0.0, max_value=100.0, step=0.01, 
                                                    value=float(nota_editar['Al√≠quota COFINS']), key='aliquota_cofins_edit', disabled=not retem_cofins_edit)
                    valor_cofins_edit = valor_servico_edit * (aliquota_cofins_edit / 100) if retem_cofins_edit else 0.0
                    st.info(f"Valor COFINS: R$ {valor_cofins_edit:.2f}")
                    
                    # CSLL
                    st.markdown("**CSLL**")
                    retem_csll_edit = st.checkbox("Ret√©m CSLL?", value=bool(nota_editar['Ret√©m CSLL']), key='retem_csll_edit')
                    aliquota_csll_edit = st.slider("Al√≠quota CSLL (%)", min_value=0.0, max_value=100.0, step=0.01, 
                                                  value=float(nota_editar['Al√≠quota CSLL']), key='aliquota_csll_edit', disabled=not retem_csll_edit)
                    valor_csll_edit = valor_servico_edit * (aliquota_csll_edit / 100) if retem_csll_edit else 0.0
                    st.info(f"Valor CSLL: R$ {valor_csll_edit:.2f}")
                
                if st.button("Salvar Altera√ß√µes"):
                    st.session_state.notas_fiscais.at[st.session_state.editando, 'Data'] = data_edit.strftime('%d/%m/%Y')
                    st.session_state.notas_fiscais.at[st.session_state.editando, 'CNPJ Tomador'] = cnpj_tomador_edit
                    st.session_state.notas_fiscais.at[st.session_state.editando, 'CNPJ Prestador'] = cnpj_prestador_edit
                    st.session_state.notas_fiscais.at[st.session_state.editando, 'Valor Servi√ßo'] = valor_servico_edit
                    st.session_state.notas_fiscais.at[st.session_state.editando, 'Descri√ß√£o Servi√ßo'] = descricao_servico_edit
                    st.session_state.notas_fiscais.at[st.session_state.editando, 'C√≥digo Servi√ßo'] = codigo_servico_edit
                    st.session_state.notas_fiscais.at[st.session_state.editando, 'Al√≠quota INSS'] = aliquota_inss_edit
                    st.session_state.notas_fiscais.at[st.session_state.editando, 'Valor INSS'] = valor_inss_edit
                    st.session_state.notas_fiscais.at[st.session_state.editando, 'Ret√©m IRRF'] = retem_irrf_edit
                    st.session_state.notas_fiscais.at[st.session_state.editando, 'Al√≠quota IRRF'] = aliquota_irrf_edit
                    st.session_state.notas_fiscais.at[st.session_state.editando, 'Valor IRRF'] = valor_irrf_edit
                    st.session_state.notas_fiscais.at[st.session_state.editando, 'Ret√©m PIS'] = retem_pis_edit
                    st.session_state.notas_fiscais.at[st.session_state.editando, 'Al√≠quota PIS'] = aliquota_pis_edit
                    st.session_state.notas_fiscais.at[st.session_state.editando, 'Valor PIS'] = valor_pis_edit
                    st.session_state.notas_fiscais.at[st.session_state.editando, 'Ret√©m COFINS'] = retem_cofins_edit
                    st.session_state.notas_fiscais.at[st.session_state.editando, 'Al√≠quota COFINS'] = aliquota_cofins_edit
                    st.session_state.notas_fiscais.at[st.session_state.editando, 'Valor COFINS'] = valor_cofins_edit
                    st.session_state.notas_fiscais.at[st.session_state.editando, 'Ret√©m CSLL'] = retem_csll_edit
                    st.session_state.notas_fiscais.at[st.session_state.editando, 'Al√≠quota CSLL'] = aliquota_csll_edit
                    st.session_state.notas_fiscais.at[st.session_state.editando, 'Valor CSLL'] = valor_csll_edit
                    
                    del st.session_state.editando
                    st.success("Altera√ß√µes salvas com sucesso!")
    else:
        st.warning("Nenhuma nota fiscal cadastrada ainda.")
    
    # Gera√ß√£o do arquivo EFD REINF
    st.subheader("Gerar Arquivo EFD REINF")
    
    if st.button("üîÑ Gerar Arquivo para Entrega (R2010 e R4020)"):
        if st.session_state.notas_fiscais.empty:
            st.error("Nenhuma nota fiscal cadastrada para gerar o arquivo.")
        else:
            # Simula√ß√£o da gera√ß√£o do arquivo (em uma aplica√ß√£o real, seria implementado o layout oficial)
            data_geracao = datetime.now().strftime('%Y%m%d%H%M%S')
            nome_arquivo = f"EFD_REINF_{data_geracao}.txt"
            
            # Cabe√ßalho do arquivo
            conteudo = [
                "|EFDREINF|0100|1|",
                "|0001|1|12345678901234|Empresa Teste|12345678|||A|12345678901|email@empresa.com|",
                "|0100|Fulano de Tal|12345678901|Rua Teste, 123|3100000||99999999|email@contador.com|"
            ]
            
            # Adiciona registros R2010 para cada nota
            for idx, nota in st.session_state.notas_fiscais.iterrows():
                conteudo.append(f"|2010|{idx+1}|{nota['CNPJ Tomador']}|{nota['CNPJ Prestador']}|{nota['Data'].replace('/', '')}|{nota['C√≥digo Servi√ßo']}|{nota['Valor Servi√ßo']:.2f}|{nota['Al√≠quota INSS']:.2f}|{nota['Valor INSS']:.2f}|")
            
            # Adiciona registros R4020 com todos os tributos
            total_inss = st.session_state.notas_fiscais['Valor INSS'].sum()
            total_irrf = st.session_state.notas_fiscais['Valor IRRF'].sum()
            total_pis = st.session_state.notas_fiscais['Valor PIS'].sum()
            total_cofins = st.session_state.notas_fiscais['Valor COFINS'].sum()
            total_csll = st.session_state.notas_fiscais['Valor CSLL'].sum()
            
            conteudo.append(f"|4020|1|{datetime.now().strftime('%Y%m')}|{total_inss:.2f}|{total_irrf:.2f}|{total_pis:.2f}|{total_cofins:.2f}|{total_csll:.2f}|1|")
            
            # Rodap√© do arquivo
            conteudo.append("|9001|1|")
            conteudo.append(f"|9900|EFDREINF|{len(conteudo) - 3}|")
            conteudo.append("|9999|7|")
            
            arquivo_final = "\n".join(conteudo)
            
            # Cria o bot√£o de download
            b64 = base64.b64encode(arquivo_final.encode('utf-8')).decode()
            href = f'<a href="data:file/txt;base64,{b64}" download="{nome_arquivo}">‚¨áÔ∏è Baixar Arquivo EFD REINF</a>'
            st.markdown(href, unsafe_allow_html=True)
            
            st.success("Arquivo gerado com sucesso!")
            
            # Resumo dos totais
            st.subheader("Resumo dos Tributos")
            col1, col2, col3, col4, col5 = st.columns(5)
            col1.metric("Total INSS", f"R$ {total_inss:.2f}")
            col2.metric("Total IRRF", f"R$ {total_irrf:.2f}")
            col3.metric("Total PIS", f"R$ {total_pis:.2f}")
            col4.metric("Total COFINS", f"R$ {total_cofins:.2f}")
            col5.metric("Total CSLL", f"R$ {total_csll:.2f}")
            
            # Pr√©via do arquivo
            st.subheader("Pr√©via do Arquivo")
            st.text_area("Conte√∫do do Arquivo", arquivo_final, height=300)

# Navega√ß√£o principal
def main():
    # Mostra a tela inicial apenas se nenhum m√≥dulo foi selecionado
    if 'modulo_selecionado' not in st.session_state:
        st.session_state.modulo_selecionado = None
    
    if st.session_state.modulo_selecionado is None:
        mostrar_tela_inicial()
    
    st.sidebar.title("Menu de Navega√ß√£o")
    opcao = st.sidebar.radio("Selecione o m√≥dulo:", 
                            ["In√≠cio", "Processador de arquivos TXT", "Lan√ßamentos EFD REINF"])
    
    if opcao != "In√≠cio":
        st.session_state.modulo_selecionado = opcao
    
    if st.session_state.modulo_selecionado == "Processador de arquivos TXT":
        processador_txt()
    elif st.session_state.modulo_selecionado == "Lan√ßamentos EFD REINF":
        lancamentos_efd_reinf()

if __name__ == "__main__":
    main()
