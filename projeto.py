import streamlit as st
import chardet
from io import BytesIO
import pandas as pd
from datetime import datetime, timedelta
import sqlite3
import numpy as np
import plotly.express as px
import base64
import time

# Configura√ß√£o inicial da p√°gina
st.set_page_config(
    page_title="Sistema Fiscal H√ÑFELE",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado com anima√ß√µes profissionais
st.markdown("""
<style>
    :root {
        --primary-color: #1e3a8a;
        --secondary-color: #f0f2f6;
        --success-color: #28a745;
        --warning-color: #ffc107;
        --danger-color: #dc3545;
        --dark-color: #343a40;
        --light-color: #f8f9fa;
    }
    
    .header {
        background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%);
        color: white;
        padding: 2rem;
        border-radius: 0.5rem;
        margin-bottom: 2rem;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        animation: fadeInDown 0.8s ease-out;
    }
    
    .header-txt {
        background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%);
        color: white;
        padding: 2rem;
        border-radius: 0.5rem;
        margin-bottom: 2rem;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        animation: fadeInDown 0.8s ease-out;
    }
    
    .header-reinf {
        background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%);
        color: white;
        padding: 2rem;
        border-radius: 0.5rem;
        margin-bottom: 2rem;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        animation: fadeInDown 0.8s ease-out;
    }
    
    .welcome-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 70vh;
        animation: fadeIn 1.5s ease-in;
    }
    
    .welcome-message {
        font-size: 3rem;
        font-weight: 700;
        color: var(--primary-color);
        text-align: center;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        background: linear-gradient(to right, #1e3a8a, #3b82f6);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        animation: pulse 2s infinite;
    }
    
    .card {
        background-color: white;
        border-radius: 0.5rem;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
    }
    
    .status-badge {
        padding: 0.35rem 0.7rem;
        border-radius: 0.5rem;
        font-size: 0.875rem;
        font-weight: 600;
        display: inline-block;
    }
    
    .status-pendente {
        background-color: var(--warning-color);
        color: var(--dark-color);
    }
    
    .status-andamento {
        background-color: var(--primary-color);
        color: white;
    }
    
    .status-finalizado {
        background-color: var(--success-color);
        color: white;
    }
    
    .status-fechado {
        background-color: var(--light-color);
        color: var(--dark-color);
    }
    
    .dificuldade-badge {
        padding: 0.35rem 0.7rem;
        border-radius: 0.5rem;
        font-size: 0.875rem;
        font-weight: 600;
        display: inline-block;
    }
    
    .dificuldade-baixa {
        background-color: var(--success-color);
        color: white;
    }
    
    .dificuldade-media {
        background-color: var(--warning-color);
        color: var(--dark-color);
    }
    
    .dificuldade-alta {
        background-color: var(--danger-color);
        color: white;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    
    @keyframes fadeInDown {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }
    
    @keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateX(20px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    
    .sidebar .sidebar-content {
        background-color: #f8f9fa;
    }
    
    .stButton>button {
        background-color: var(--primary-color);
        color: white;
        border-radius: 0.5rem;
        padding: 0.5rem 1rem;
        transition: all 0.3s ease;
    }
    
    .stButton>button:hover {
        background-color: #1d4ed8;
        transform: translateY(-2px);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .stTextInput>div>div>input {
        border-radius: 0.5rem !important;
    }
    
    .stSelectbox>div>div>select {
        border-radius: 0.5rem !important;
    }
    
    .stDateInput>div>div>input {
        border-radius: 0.5rem !important;
    }
    
    .stTextArea>div>div>textarea {
        border-radius: 0.5rem !important;
    }
</style>
""", unsafe_allow_html=True)

# =============================================
# FUN√á√ïES DO PROCESSADOR DE ARQUIVOS TXT
# =============================================

def processador_txt():
    st.markdown('<div class="header-txt"><h1>üìÑ Processador de Arquivos TXT</h1></div>', unsafe_allow_html=True)
    st.markdown("""
    <div class="card">
        Remova linhas indesejadas de arquivos TXT. Carregue seu arquivo e defina os padr√µes a serem removidos.
    </div>
    """, unsafe_allow_html=True)

    def detectar_encoding(conteudo):
        """Detecta o encoding do conte√∫do do arquivo"""
        resultado = chardet.detect(conteudo)
        return resultado['encoding']

    def processar_arquivo(conteudo, padroes):
        """
        Processa o conte√∫do do arquivo removendo linhas indesejadas e realizando substitui√ß√µes
        """
        try:
            # Dicion√°rio de substitui√ß√µes
            substituicoes = {
                "IMPOSTO IMPORTACAO": "IMP IMPORT",
                "TAXA SICOMEX": "TX SISCOMEX",
                "FRETE INTERNACIONAL": "FRET INTER",
                "SEGURO INTERNACIONAL": "SEG INTERN"
            }
            
            # Detecta o encoding
            encoding = detectar_encoding(conteudo)
            
            # Decodifica o conte√∫do
            try:
                texto = conteudo.decode(encoding)
            except UnicodeDecodeError:
                texto = conteudo.decode('latin-1')
            
            # Processa as linhas
            linhas = texto.splitlines()
            linhas_processadas = []
            
            for linha in linhas:
                linha = linha.strip()
                # Verifica se a linha cont√©m algum padr√£o a ser removido
                if not any(padrao in linha for padrao in padroes):
                    # Aplica as substitui√ß√µes
                    for original, substituto in substituicoes.items():
                        linha = linha.replace(original, substituto)
                    linhas_processadas.append(linha)
            
            return "\n".join(linhas_processadas), len(linhas)
        
        except Exception as e:
            st.error(f"Erro ao processar o arquivo: {str(e)}")
            return None, 0

    # Padr√µes padr√£o para remo√ß√£o
    padroes_default = ["-------", "SPED EFD-ICMS/IPI"]
    
    # Upload do arquivo
    arquivo = st.file_uploader("Selecione o arquivo TXT", type=['txt'])
    
    # Op√ß√µes avan√ßadas
    with st.expander("‚öôÔ∏è Configura√ß√µes avan√ßadas", expanded=False):
        padroes_adicionais = st.text_input(
            "Padr√µes adicionais para remo√ß√£o (separados por v√≠rgula)",
            help="Exemplo: padr√£o1, padr√£o2, padr√£o3"
        )
        
        padroes = padroes_default + [
            p.strip() for p in padroes_adicionais.split(",") 
            if p.strip()
        ] if padroes_adicionais else padroes_default

    if arquivo is not None:
        try:
            # L√™ o conte√∫do do arquivo
            conteudo = arquivo.read()
            
            # Processa o arquivo
            resultado, total_linhas = processar_arquivo(conteudo, padroes)
            
            if resultado is not None:
                # Mostra estat√≠sticas
                linhas_processadas = len(resultado.splitlines())
                st.success(f"""
                **Processamento conclu√≠do!**  
                ‚úîÔ∏è Linhas originais: {total_linhas}  
                ‚úîÔ∏è Linhas processadas: {linhas_processadas}  
                ‚úîÔ∏è Linhas removidas: {total_linhas - linhas_processadas}
                """)

                # Pr√©via do resultado
                st.subheader("Pr√©via do resultado")
                st.text_area("Conte√∫do processado", resultado, height=300)

                # Bot√£o de download
                buffer = BytesIO()
                buffer.write(resultado.encode('utf-8'))
                buffer.seek(0)
                
                st.download_button(
                    label="‚¨áÔ∏è Baixar arquivo processado",
                    data=buffer,
                    file_name=f"processado_{arquivo.name}",
                    mime="text/plain"
                )
        
        except Exception as e:
            st.error(f"Erro inesperado: {str(e)}")
            st.info("Tente novamente ou verifique o arquivo.")

# =============================================
# FUN√á√ïES DE LAN√áAMENTOS EFD REINF
# =============================================

def lancamentos_efd_reinf():
    st.markdown('<div class="header-reinf"><h1>üìä Lan√ßamentos EFD REINF</h1></div>', unsafe_allow_html=True)
    st.markdown("""
    <div class="card">
        Sistema para lan√ßamento de notas fiscais de servi√ßo tomados e gera√ß√£o de arquivos R2010 e R4020 (com IRRF, PIS, COFINS e CSLL).
    </div>
    """, unsafe_allow_html=True)
    
    # Conex√£o com o banco de dados SQLite
    conn = sqlite3.connect('fiscal_hefele.db')
    c = conn.cursor()
    
    # Criar tabela se n√£o existir
    c.execute('''
        CREATE TABLE IF NOT EXISTS notas_fiscais (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            data TEXT,
            cnpj_tomador TEXT,
            cnpj_prestador TEXT,
            valor_servico REAL,
            descricao_servico TEXT,
            codigo_servico TEXT,
            aliquota_inss REAL,
            valor_inss REAL,
            retem_irrf INTEGER,
            aliquota_irrf REAL,
            valor_irrf REAL,
            retem_pis INTEGER,
            aliquota_pis REAL,
            valor_pis REAL,
            retem_cofins INTEGER,
            aliquota_cofins REAL,
            valor_cofins REAL,
            retem_csll INTEGER,
            aliquota_csll REAL,
            valor_csll REAL
        )
    ''')
    conn.commit()
    
    # Carregar dados existentes
    df_notas = pd.read_sql_query("SELECT * FROM notas_fiscais", conn)
    
    # Formul√°rio para adicionar nova nota fiscal
    with st.expander("‚ûï Adicionar Nova Nota Fiscal", expanded=True):
        col1, col2 = st.columns(2)
        with col1:
            data = st.date_input("Data da Nota Fiscal")
            cnpj_tomador = st.text_input("CNPJ Tomador (14 d√≠gitos)", max_chars=14)
            cnpj_prestador = st.text_input("CNPJ Prestador (14 d√≠gitos)", max_chars=14)
            valor_servico = st.number_input("Valor do Servi√ßo (R$)", min_value=0.0, format="%.2f")
            descricao_servico = st.text_input("Descri√ß√£o do Servi√ßo")
            codigo_servico = st.text_input("C√≥digo do Servi√ßo (LC 116)")
        
        with col2:
            st.subheader("Tributos")
            
            # INSS
            st.markdown("**INSS**")
            aliquota_inss = st.slider("Al√≠quota INSS (%)", min_value=0.0, max_value=100.0, step=0.01, value=4.5, key='aliquota_inss')
            valor_inss = valor_servico * (aliquota_inss / 100)
            st.info(f"Valor INSS: R$ {valor_inss:.2f}")
            
            # IRRF
            st.markdown("**IRRF**")
            retem_irrf = st.checkbox("Ret√©m IRRF?", value=False, key='retem_irrf')
            aliquota_irrf = st.slider("Al√≠quota IRRF (%)", min_value=0.0, max_value=100.0, step=0.01, value=1.5, key='aliquota_irrf', disabled=not retem_irrf)
            valor_irrf = valor_servico * (aliquota_irrf / 100) if retem_irrf else 0.0
            st.info(f"Valor IRRF: R$ {valor_irrf:.2f}")
            
            # PIS
            st.markdown("**PIS**")
            retem_pis = st.checkbox("Ret√©m PIS?", value=False, key='retem_pis')
            aliquota_pis = st.slider("Al√≠quota PIS (%)", min_value=0.0, max_value=100.0, step=0.01, value=0.65, key='aliquota_pis', disabled=not retem_pis)
            valor_pis = valor_servico * (aliquota_pis / 100) if retem_pis else 0.0
            st.info(f"Valor PIS: R$ {valor_pis:.2f}")
            
            # COFINS
            st.markdown("**COFINS**")
            retem_cofins = st.checkbox("Ret√©m COFINS?", value=False, key='retem_cofins')
            aliquota_cofins = st.slider("Al√≠quota COFINS (%)", min_value=0.0, max_value=100.0, step=0.01, value=3.0, key='aliquota_cofins', disabled=not retem_cofins)
            valor_cofins = valor_servico * (aliquota_cofins / 100) if retem_cofins else 0.0
            st.info(f"Valor COFINS: R$ {valor_cofins:.2f}")
            
            # CSLL
            st.markdown("**CSLL**")
            retem_csll = st.checkbox("Ret√©m CSLL?", value=False, key='retem_csll')
            aliquota_csll = st.slider("Al√≠quota CSLL (%)", min_value=0.0, max_value=100.0, step=0.01, value=1.0, key='aliquota_csll', disabled=not retem_csll)
            valor_csll = valor_servico * (aliquota_csll / 100) if retem_csll else 0.0
            st.info(f"Valor CSLL: R$ {valor_csll:.2f}")
        
        if st.button("Adicionar Nota Fiscal"):
            # Inserir no banco de dados
            c.execute('''
                INSERT INTO notas_fiscais (
                    data, cnpj_tomador, cnpj_prestador, valor_servico, descricao_servico, codigo_servico,
                    aliquota_inss, valor_inss, retem_irrf, aliquota_irrf, valor_irrf,
                    retem_pis, aliquota_pis, valor_pis, retem_cofins, aliquota_cofins, valor_cofins,
                    retem_csll, aliquota_csll, valor_csll
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                data.strftime('%Y-%m-%d'), cnpj_tomador, cnpj_prestador, valor_servico, descricao_servico, codigo_servico,
                aliquota_inss, valor_inss, int(retem_irrf), aliquota_irrf, valor_irrf,
                int(retem_pis), aliquota_pis, valor_pis, int(retem_cofins), aliquota_cofins, valor_cofins,
                int(retem_csll), aliquota_csll, valor_csll
            ))
            conn.commit()
            st.success("Nota fiscal adicionada com sucesso!")
            st.experimental_rerun()
    
    # Visualiza√ß√£o das notas fiscais cadastradas
    st.subheader("Notas Fiscais Cadastradas")
    df_notas = pd.read_sql_query("SELECT * FROM notas_fiscais", conn)
    
    if not df_notas.empty:
        # Mostra apenas as colunas principais na visualiza√ß√£o
        cols_principais = ['data', 'cnpj_tomador', 'cnpj_prestador', 'valor_servico', 'descricao_servico', 'codigo_servico']
        st.dataframe(df_notas[cols_principais])
        
        # Op√ß√µes para editar/excluir notas
        col1, col2 = st.columns(2)
        with col1:
            linha_editar = st.number_input("N√∫mero da linha para editar", min_value=0, max_value=len(df_notas)-1, key='linha_editar')
            if st.button("Editar Linha"):
                st.session_state.editando = linha_editar
                
        with col2:
            linha_excluir = st.number_input("N√∫mero da linha para excluir", min_value=0, max_value=len(df_notas)-1, key='linha_excluir')
            if st.button("Excluir Linha"):
                id_excluir = df_notas.iloc[linha_excluir]['id']
                c.execute("DELETE FROM notas_fiscais WHERE id = ?", (id_excluir,))
                conn.commit()
                st.success("Linha exclu√≠da com sucesso!")
                st.experimental_rerun()
        
        # Formul√°rio de edi√ß√£o
        if 'editando' in st.session_state:
            with st.expander("‚úèÔ∏è Editar Nota Fiscal", expanded=True):
                nota_editar = df_notas.iloc[st.session_state.editando]
                
                col1, col2 = st.columns(2)
                with col1:
                    data_edit = st.date_input("Data", value=datetime.strptime(nota_editar['data'], '%Y-%m-%d'), key='data_edit')
                    cnpj_tomador_edit = st.text_input("CNPJ Tomador", value=nota_editar['cnpj_tomador'], key='cnpj_tomador_edit')
                    cnpj_prestador_edit = st.text_input("CNPJ Prestador", value=nota_editar['cnpj_prestador'], key='cnpj_prestador_edit')
                    valor_servico_edit = st.number_input("Valor do Servi√ßo (R$)", value=float(nota_editar['valor_servico']), key='valor_servico_edit')
                    descricao_servico_edit = st.text_input("Descri√ß√£o do Servi√ßo", value=nota_editar['descricao_servico'], key='descricao_servico_edit')
                    codigo_servico_edit = st.text_input("C√≥digo do Servi√ßo", value=nota_editar['codigo_servico'], key='codigo_servico_edit')
                
                with col2:
                    st.subheader("Tributos")
                    
                    # INSS
                    st.markdown("**INSS**")
                    aliquota_inss_edit = st.slider("Al√≠quota INSS (%)", min_value=0.0, max_value=100.0, step=0.01, 
                                                value=float(nota_editar['aliquota_inss']), key='aliquota_inss_edit')
                    valor_inss_edit = valor_servico_edit * (aliquota_inss_edit / 100)
                    st.info(f"Valor INSS: R$ {valor_inss_edit:.2f}")
                    
                    # IRRF
                    st.markdown("**IRRF**")
                    retem_irrf_edit = st.checkbox("Ret√©m IRRF?", value=bool(nota_editar['retem_irrf']), key='retem_irrf_edit')
                    aliquota_irrf_edit = st.slider("Al√≠quota IRRF (%)", min_value=0.0, max_value=100.0, step=0.01, 
                                                  value=float(nota_editar['aliquota_irrf']), key='aliquota_irrf_edit', disabled=not retem_irrf_edit)
                    valor_irrf_edit = valor_servico_edit * (aliquota_irrf_edit / 100) if retem_irrf_edit else 0.0
                    st.info(f"Valor IRRF: R$ {valor_irrf_edit:.2f}")
                    
                    # PIS
                    st.markdown("**PIS**")
                    retem_pis_edit = st.checkbox("Ret√©m PIS?", value=bool(nota_editar['retem_pis']), key='retem_pis_edit')
                    aliquota_pis_edit = st.slider("Al√≠quota PIS (%)", min_value=0.0, max_value=100.0, step=0.01, 
                                                value=float(nota_editar['aliquota_pis']), key='aliquota_pis_edit', disabled=not retem_pis_edit)
                    valor_pis_edit = valor_servico_edit * (aliquota_pis_edit / 100) if retem_pis_edit else 0.0
                    st.info(f"Valor PIS: R$ {valor_pis_edit:.2f}")
                    
                    # COFINS
                    st.markdown("**COFINS**")
                    retem_cofins_edit = st.checkbox("Ret√©m COFINS?", value=bool(nota_editar['retem_cofins']), key='retem_cofins_edit')
                    aliquota_cofins_edit = st.slider("Al√≠quota COFINS (%)", min_value=0.0, max_value=100.0, step=0.01, 
                                                    value=float(nota_editar['aliquota_cofins']), key='aliquota_cofins_edit', disabled=not retem_cofins_edit)
                    valor_cofins_edit = valor_servico_edit * (aliquota_cofins_edit / 100) if retem_cofins_edit else 0.0
                    st.info(f"Valor COFINS: R$ {valor_cofins_edit:.2f}")
                    
                    # CSLL
                    st.markdown("**CSLL**")
                    retem_csll_edit = st.checkbox("Ret√©m CSLL?", value=bool(nota_editar['retem_csll']), key='retem_csll_edit')
                    aliquota_csll_edit = st.slider("Al√≠quota CSLL (%)", min_value=0.0, max_value=100.0, step=0.01, 
                                                  value=float(nota_editar['aliquota_csll']), key='aliquota_csll_edit', disabled=not retem_csll_edit)
                    valor_csll_edit = valor_servico_edit * (aliquota_csll_edit / 100) if retem_csll_edit else 0.0
                    st.info(f"Valor CSLL: R$ {valor_csll_edit:.2f}")
                
                if st.button("Salvar Altera√ß√µes"):
                    # Atualizar no banco de dados
                    c.execute('''
                        UPDATE notas_fiscais SET
                            data = ?, cnpj_tomador = ?, cnpj_prestador = ?, valor_servico = ?,
                            descricao_servico = ?, codigo_servico = ?, aliquota_inss = ?,
                            valor_inss = ?, retem_irrf = ?, aliquota_irrf = ?, valor_irrf = ?,
                            retem_pis = ?, aliquota_pis = ?, valor_pis = ?, retem_cofins = ?,
                            aliquota_cofins = ?, valor_cofins = ?, retem_csll = ?,
                            aliquota_csll = ?, valor_csll = ?
                        WHERE id = ?
                    ''', (
                        data_edit.strftime('%Y-%m-%d'), cnpj_tomador_edit, cnpj_prestador_edit, valor_servico_edit,
                        descricao_servico_edit, codigo_servico_edit, aliquota_inss_edit,
                        valor_inss_edit, int(retem_irrf_edit), aliquota_irrf_edit, valor_irrf_edit,
                        int(retem_pis_edit), aliquota_pis_edit, valor_pis_edit, int(retem_cofins_edit),
                        aliquota_cofins_edit, valor_cofins_edit, int(retem_csll_edit),
                        aliquota_csll_edit, valor_csll_edit, nota_editar['id']
                    ))
                    conn.commit()
                    del st.session_state.editando
                    st.success("Altera√ß√µes salvas com sucesso!")
                    st.experimental_rerun()
    else:
        st.warning("Nenhuma nota fiscal cadastrada ainda.")
    
    # Gera√ß√£o do arquivo EFD REINF
    st.subheader("Gerar Arquivo EFD REINF")
    
    if st.button("üîÑ Gerar Arquivo para Entrega (R2010 e R4020)"):
        if df_notas.empty:
            st.error("Nenhuma nota fiscal cadastrada para gerar o arquivo.")
        else:
            # Simula√ß√£o da gera√ß√£o do arquivo
            data_geracao = datetime.now().strftime('%Y%m%d%H%M%S')
            nome_arquivo = f"EFD_REINF_{data_geracao}.txt"
            
            # Cabe√ßalho do arquivo
            conteudo = [
                "|EFDREINF|0100|1|",
                "|0001|1|12345678901234|Empresa Teste|12345678|||A|12345678901|email@empresa.com|",
                "|0100|Fulano de Tal|12345678901|Rua Teste, 123|3100000||99999999|email@contador.com|"
            ]
            
            # Adiciona registros R2010 para cada nota
            for idx, nota in df_notas.iterrows():
                conteudo.append(f"|2010|{idx+1}|{nota['cnpj_tomador']}|{nota['cnpj_prestador']}|{nota['data'].replace('-', '')}|{nota['codigo_servico']}|{nota['valor_servico']:.2f}|{nota['aliquota_inss']:.2f}|{nota['valor_inss']:.2f}|")
            
            # Adiciona registros R4020 com todos os tributos
            total_inss = df_notas['valor_inss'].sum()
            total_irrf = df_notas['valor_irrf'].sum()
            total_pis = df_notas['valor_pis'].sum()
            total_cofins = df_notas['valor_cofins'].sum()
            total_csll = df_notas['valor_csll'].sum()
            
            conteudo.append(f"|4020|1|{datetime.now().strftime('%Y%m')}|{total_inss:.2f}|{total_irrf:.2f}|{total_pis:.2f}|{total_cofins:.2f}|{total_csll:.2f}|1|")
            
            # Rodap√© do arquivo
            conteudo.append("|9001|1|")
            conteudo.append(f"|9900|EFDREINF|{len(conteudo) - 3}|")
            conteudo.append("|9999|7|")
            
            arquivo_final = "\n".join(conteudo)
            
            # Cria o bot√£o de download
            b64 = base64.b64encode(arquivo_final.encode('utf-8')).decode()
            href = f'<a href="data:file/txt;base64,{b64}" download="{nome_arquivo}">‚¨áÔ∏è Baixar Arquivo EFD REINF</a>'
            st.markdown(href, unsafe_allow_html=True)
            
            st.success("Arquivo gerado com sucesso!")
            
            # Resumo dos totais
            st.subheader("Resumo dos Tributos")
            col1, col2, col3, col4, col5 = st.columns(5)
            col1.metric("Total INSS", f"R$ {total_inss:.2f}")
            col2.metric("Total IRRF", f"R$ {total_irrf:.2f}")
            col3.metric("Total PIS", f"R$ {total_pis:.2f}")
            col4.metric("Total COFINS", f"R$ {total_cofins:.2f}")
            col5.metric("Total CSLL", f"R$ {total_csll:.2f}")
            
            # Pr√©via do arquivo
            st.subheader("Pr√©via do Arquivo")
            st.text_area("Conte√∫do do Arquivo", arquivo_final, height=300)
    
    conn.close()

# =============================================
# FUN√á√ïES DE ATIVIDADES FISCAIS
# =============================================

def atividades_fiscais():
    st.markdown('<div class="header"><h1>üìä Controle de Atividades Fiscais - H√ÑFELE BRASIL</h1></div>', unsafe_allow_html=True)

    # Conex√£o com o banco de dados SQLite
    DATABASE = 'atividades_fiscais.db'

    def create_connection():
        """Cria e retorna uma conex√£o com o banco de dados."""
        try:
            conn = sqlite3.connect(DATABASE)
            return conn
        except sqlite3.Error as e:
            st.error(f"Erro ao conectar ao banco de dados: {e}")
            return None

    def create_table():
        """Cria a tabela de atividades se n√£o existir."""
        conn = create_connection()
        if conn is not None:
            try:
                cursor = conn.cursor()
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS atividades (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        Obrigacao TEXT NOT NULL,
                        Descricao TEXT,
                        Periodicidade TEXT,
                        OrgaoResponsavel TEXT,
                        DataLimite TEXT,
                        Status TEXT,
                        Dificuldade TEXT,
                        Prazo TEXT,
                        DataInicio TEXT,
                        DataConclusao TEXT,
                        MesAnoReferencia TEXT NOT NULL
                    )
                """)
                conn.commit()
            except sqlite3.Error as e:
                st.error(f"Erro ao criar tabela: {e}")
            finally:
                conn.close()

    def load_data_from_db(mes_ano_referencia):
        """Carrega dados do banco de dados para um DataFrame."""
        conn = create_connection()
        df = pd.DataFrame()
        if conn is not None:
            try:
                query = "SELECT * FROM atividades WHERE MesAnoReferencia = ?"
                df = pd.read_sql_query(query, conn, params=(mes_ano_referencia,))
                
                # Converter colunas de data
                date_columns = ['Prazo', 'DataInicio', 'DataConclusao']
                for col in date_columns:
                    if col in df.columns:
                        df[col] = pd.to_datetime(df[col], errors='coerce')
                    else:
                        df[col] = pd.NaT
            except sqlite3.Error as e:
                st.error(f"Erro ao carregar dados do banco de dados: {e}")
            finally:
                conn.close()
        return df

    def update_activity_in_db(activity_id, updates):
        """Atualiza uma atividade no banco de dados."""
        conn = create_connection()
        if conn is not None:
            try:
                cursor = conn.cursor()
                set_clause = ", ".join([f"{key} = ?" for key in updates.keys()])
                values = list(updates.values())
                values.append(activity_id)
                
                query = f"UPDATE atividades SET {set_clause} WHERE id = ?"
                cursor.execute(query, values)
                conn.commit()
                return True
            except sqlite3.Error as e:
                st.error(f"Erro ao atualizar atividade: {e}")
                return False
            finally:
                conn.close()
        return False

    def add_activity_to_db(activity):
        """Adiciona uma nova atividade ao banco de dados."""
        conn = create_connection()
        if conn is not None:
            try:
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO atividades (
                        Obrigacao, Descricao, Periodicidade, OrgaoResponsavel, DataLimite,
                        Status, Dificuldade, Prazo, DataInicio, DataConclusao, MesAnoReferencia
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    activity['Obriga√ß√£o'], activity['Descri√ß√£o'], activity['Periodicidade'],
                    activity['√ìrg√£o Respons√°vel'], activity['Data Limite'], activity['Status'],
                    activity['Dificuldade'], activity['Prazo'], activity['Data In√≠cio'],
                    activity['Data Conclus√£o'], activity['MesAnoReferencia']
                ))
                conn.commit()
                return True
            except sqlite3.Error as e:
                st.error(f"Erro ao adicionar atividade: {e}")
                return False
            finally:
                conn.close()
        return False

    def load_initial_data_template():
        """Retorna o template de dados iniciais."""
        return [
            {
                "Obriga√ß√£o": "Sped Fiscal",
                "Descri√ß√£o": "Entrega do arquivo digital da EFD ICMS/IPI com registros fiscais de entradas, sa√≠das, apura√ß√£o de ICMS e IPI.",
                "Periodicidade": "Mensal",
                "√ìrg√£o Respons√°vel": "SEFAZ-PR",
                "Data Limite": "At√© o dia 10 do m√™s subsequente",
                "Status": "Pendente",
                "Dificuldade": "M√©dia",
                "Prazo": None,
                "Data In√≠cio": None,
                "Data Conclus√£o": None,
                "MesAnoReferencia": None
            },
            {
                "Obriga√ß√£o": "DCTF",
                "Descri√ß√£o": "Declara√ß√£o de D√©bitos e Cr√©ditos Tribut√°rios Federais",
                "Periodicidade": "Mensal",
                "√ìrg√£o Respons√°vel": "RFB",
                "Data Limite": "At√© o dia 15 do m√™s subsequente",
                "Status": "Pendente",
                "Dificuldade": "Alta",
                "Prazo": None,
                "Data In√≠cio": None,
                "Data Conclus√£o": None,
                "MesAnoReferencia": None
            },
            {
                "Obriga√ß√£o": "EFD Contribui√ß√µes",
                "Descri√ß√£o": "Escritura√ß√£o Fiscal Digital de Contribui√ß√µes",
                "Periodicidade": "Mensal",
                "√ìrg√£o Respons√°vel": "RFB",
                "Data Limite": "At√© o dia 15 do m√™s subsequente",
                "Status": "Pendente",
                "Dificuldade": "M√©dia",
                "Prazo": None,
                "Data In√≠cio": None,
                "Data Conclus√£o": None,
                "MesAnoReferencia": None
            }
        ]

    def get_next_month_year(current_month_year):
        """Calcula o pr√≥ximo m√™s/ano."""
        month, year = map(int, current_month_year.split('/'))
        if month == 12:
            return f"01/{year + 1}"
        return f"{str(month + 1).zfill(2)}/{year}"

    def get_previous_month_year(current_month_year):
        """Calcula o m√™s/ano anterior."""
        month, year = map(int, current_month_year.split('/'))
        if month == 1:
            return f"12/{year - 1}"
        return f"{str(month - 1).zfill(2)}/{year}"

    def calculate_deadline(data_limite_text, mes_ano_referencia):
        """Calcula a data limite com base no texto descritivo."""
        ref_month, ref_year = map(int, mes_ano_referencia.split('/'))
        
        if "dia 10 do m√™s subsequente" in data_limite_text:
            date_for_calc = datetime(ref_year, ref_month, 1) + pd.DateOffset(months=1)
            return date_for_calc.replace(day=10)
        elif "dia 15 do m√™s subsequente" in data_limite_text:
            date_for_calc = datetime(ref_year, ref_month, 1) + pd.DateOffset(months=1)
            return date_for_calc.replace(day=15)
        return datetime(ref_year, ref_month, 1) + timedelta(days=90)

    def apply_status_style(status):
        """Aplica estilo CSS ao status."""
        if status == "Pendente":
            return '<span class="status-badge status-pendente">Pendente</span>'
        elif status == "Em Andamento":
            return '<span class="status-badge status-andamento">Em Andamento</span>'
        elif status == "Finalizado":
            return '<span class="status-badge status-finalizado">Finalizado</span>'
        elif status == "Fechado":
            return '<span class="status-badge status-fechado">Fechado</span>'
        return f'<span class="status-badge">{status}</span>'

    def apply_difficulty_style(dificuldade):
        """Aplica estilo CSS √† dificuldade."""
        if dificuldade == "Baixa":
            return '<span class="dificuldade-badge dificuldade-baixa">Baixa</span>'
        elif dificuldade == "M√©dia":
            return '<span class="dificuldade-badge dificuldade-media">M√©dia</span>'
        elif dificuldade == "Alta":
            return '<span class="dificuldade-badge dificuldade-alta">Alta</span>'
        return f'<span class="dificuldade-badge">{dificuldade}</span>'

    def calculate_days_remaining(row):
        """Calcula dias restantes para conclus√£o."""
        hoje = datetime.now()
        if pd.isna(row['Prazo']) or row['Status'] in ['Finalizado', 'Fechado']:
            return None
        prazo = row['Prazo']
        days = (prazo - hoje).days
        return days if days >= 0 else 0

    def initialize_session_state():
        """Inicializa o estado da sess√£o."""
        if 'mes_ano_referencia' not in st.session_state:
            st.session_state.mes_ano_referencia = datetime.now().strftime('%m/%Y')
        
        if 'df_atividades' not in st.session_state:
            st.session_state.df_atividades = load_data_from_db(st.session_state.mes_ano_referencia)

    def show_navigation():
        """Mostra a navega√ß√£o entre meses."""
        col1, col2, col3 = st.columns([1, 2, 1])
        with col1:
            if st.button("‚óÄÔ∏è M√™s Anterior"):
                st.session_state.mes_ano_referencia = get_previous_month_year(st.session_state.mes_ano_referencia)
                st.session_state.df_atividades = load_data_from_db(st.session_state.mes_ano_referencia)
                st.rerun()
        
        with col2:
            st.markdown(f"<h2 style='text-align: center;'>M√™s/Ano de Refer√™ncia: {st.session_state.mes_ano_referencia}</h2>", unsafe_allow_html=True)
        
        with col3:
            if st.button("Pr√≥ximo M√™s ‚ñ∂Ô∏è"):
                st.session_state.mes_ano_referencia = get_next_month_year(st.session_state.mes_ano_referencia)
                st.session_state.df_atividades = load_data_from_db(st.session_state.mes_ano_referencia)
                st.rerun()

    def show_metrics():
        """Mostra as m√©tricas de status."""
        cols = st.columns(5)
        metrics = [
            ("Total de Atividades", ""),
            ("Pendentes", "Pendente"),
            ("Em Andamento", "Em Andamento"),
            ("Finalizadas", "Finalizado"),
            ("Fechadas", "Fechado")
        ]
        
        for (label, status), col in zip(metrics, cols):
            if status:
                count = len(st.session_state.df_atividades[st.session_state.df_atividades['Status'] == status])
            else:
                count = len(st.session_state.df_atividades)
            col.metric(label, count)

    def show_charts():
        """Mostra os gr√°ficos de an√°lise."""
        st.markdown("---")
        st.markdown('<div class="card"><h3>üìà An√°lise Gr√°fica</h3></div>', unsafe_allow_html=True)
        
        if st.session_state.df_atividades.empty:
            st.info("Adicione atividades ou habilite um m√™s para ver as an√°lises gr√°ficas.")
            return

        tab1, tab2, tab3 = st.tabs(["Status", "Dificuldade", "Prazo"])

        with tab1:
            status_counts = st.session_state.df_atividades['Status'].value_counts().reset_index()
            fig_status = px.pie(
                status_counts, 
                values='count', 
                names='Status',
                title='Distribui√ß√£o por Status',
                color='Status',
                color_discrete_map={
                    'Pendente': '#ffc107',
                    'Em Andamento': '#007bff',
                    'Finalizado': '#28a745',
                    'Fechado': '#6c757d'
                }
            )
            st.plotly_chart(fig_status, use_container_width=True)

        with tab2:
            dificuldade_counts = st.session_state.df_atividades['Dificuldade'].value_counts().reset_index()
            fig_dificuldade = px.bar(
                dificuldade_counts,
                x='Dificuldade',
                y='count',
                title='Distribui√ß√£o por N√≠vel de Dificuldade',
                color='Dificuldade',
                color_discrete_map={
                    'Baixa': '#28a745',
                    'M√©dia': '#ffc107',
                    'Alta': '#dc3545'
                }
            )
            st.plotly_chart(fig_dificuldade, use_container_width=True)

        with tab3:
            prazo_df = st.session_state.df_atividades.copy()
            prazo_df = prazo_df.dropna(subset=['Prazo'])
            
            if not prazo_df.empty:
                prazo_df['Prazo Formatado'] = prazo_df['Prazo'].dt.strftime('%d/%m/%Y')
                prazo_df['Data In√≠cio Visual'] = prazo_df['DataInicio'].fillna(prazo_df['Prazo'] - timedelta(days=1))
                
                fig_prazo = px.timeline(
                    prazo_df,
                    x_start="Data In√≠cio Visual",
                    x_end="Prazo",
                    y="Obrigacao",
                    color="Status",
                    title='Linha do Tempo das Atividades',
                    color_discrete_map={
                        'Pendente': '#ffc107',
                        'Em Andamento': '#007bff',
                        'Finalizado': '#28a745',
                        'Fechado': '#6c757d'
                    },
                    hover_name="Obrigacao",
                    hover_data={
                        "Status": True,
                        "Dificuldade": True,
                        "Prazo Formatado": True,
                        "Data In√≠cio Visual": False
                    }
                )
                fig_prazo.update_yaxes(autorange="reversed")
                st.plotly_chart(fig_prazo, use_container_width=True)
            else:
                st.info("N√£o h√° atividades com prazo definido para exibir na linha do tempo.")

    def show_activities_table():
        """Mostra a tabela de atividades com filtros."""
        st.markdown("---")
        st.markdown('<div class="card"><h3>üìã Lista de Atividades</h3></div>', unsafe_allow_html=True)

        if st.session_state.df_atividades.empty:
            st.info("Nenhuma atividade encontrada para o m√™s selecionado.")
            return

        with st.expander("üîç Filtros", expanded=True):
            col1, col2, col3 = st.columns(3)
            with col1:
                status_filter = st.selectbox("Status", ["Todos", "Pendente", "Em Andamento", "Finalizado", "Fechado"])
            with col2:
                difficulty_filter = st.selectbox("Dificuldade", ["Todos", "Baixa", "M√©dia", "Alta"])
            with col3:
                orgao_options = ["Todos"] + list(st.session_state.df_atividades['OrgaoResponsavel'].unique())
                orgao_filter = st.selectbox("√ìrg√£o Respons√°vel", orgao_options)

        filtered_df = st.session_state.df_atividades.copy()
        
        if status_filter != "Todos":
            filtered_df = filtered_df[filtered_df['Status'] == status_filter]
        if difficulty_filter != "Todos":
            filtered_df = filtered_df[filtered_df['Dificuldade'] == difficulty_filter]
        if orgao_filter != "Todos":
            filtered_df = filtered_df[filtered_df['OrgaoResponsavel'] == orgao_filter]
        
        filtered_df['Dias Restantes'] = filtered_df.apply(calculate_days_remaining, axis=1)

        display_df = filtered_df.copy()
        display_df['Status'] = display_df['Status'].apply(apply_status_style)
        display_df['Dificuldade'] = display_df['Dificuldade'].apply(apply_difficulty_style)
        
        for col in ['Prazo', 'DataInicio', 'DataConclusao']:
            display_df[col] = display_df[col].dt.strftime('%d/%m/%Y').replace({pd.NaT: ''})

        cols_to_display = [
            'Obrigacao', 'Descricao', 'Periodicidade', 'OrgaoResponsavel',
            'DataLimite', 'Status', 'Dificuldade', 'Prazo', 'Dias Restantes'
        ]
        
        st.write(display_df[cols_to_display].to_html(escape=False, index=False), unsafe_allow_html=True)

    def show_add_activity_form():
        """Mostra o formul√°rio para adicionar nova atividade."""
        st.markdown("---")
        with st.expander("‚ûï Adicionar Nova Atividade", expanded=False):
            with st.form("nova_atividade_form", clear_on_submit=True):
                col1, col2 = st.columns(2)
                with col1:
                    obrigacao = st.text_input("Obriga√ß√£o*", placeholder="Nome da obriga√ß√£o fiscal")
                    descricao = st.text_area("Descri√ß√£o*", placeholder="Descri√ß√£o detalhada da atividade")
                    periodicidade = st.selectbox("Periodicidade*", ["Mensal", "Trimestral", "Anual", "Eventual", "Extinta"])
                with col2:
                    orgao = st.text_input("√ìrg√£o Respons√°vel*", placeholder="√ìrg√£o respons√°vel")
                    data_limite = st.text_input("Data Limite de Entrega*", placeholder="Ex: At√© o dia 10 do m√™s subsequente")
                    status = st.selectbox("Status*", ["Pendente", "Em Andamento", "Finalizado", "Fechado"])
                    dificuldade = st.selectbox("Dificuldade*", ["Baixa", "M√©dia", "Alta"])
                    prazo = st.date_input("Prazo Final*")

                if st.form_submit_button("Adicionar Atividade"):
                    if obrigacao and descricao and orgao and data_limite and prazo:
                        prazo_calculado = calculate_deadline(data_limite, st.session_state.mes_ano_referencia)
                        
                        nova_atividade = {
                            "Obriga√ß√£o": obrigacao,
                            "Descri√ß√£o": descricao,
                            "Periodicidade": periodicidade,
                            "√ìrg√£o Respons√°vel": orgao,
                            "Data Limite": data_limite,
                            "Status": status,
                            "Dificuldade": dificuldade,
                            "Prazo": prazo_calculado.strftime('%Y-%m-%d %H:%M:%S') if prazo_calculado else None,
                            "Data In√≠cio": datetime.now().strftime('%Y-%m-%d %H:%M:%S') if status == "Em Andamento" else None,
                            "Data Conclus√£o": datetime.now().strftime('%Y-%m-%d %H:%M:%S') if status == "Finalizado" else None,
                            "MesAnoReferencia": st.session_state.mes_ano_referencia
                        }

                        if add_activity_to_db(nova_atividade):
                            st.session_state.df_atividades = load_data_from_db(st.session_state.mes_ano_referencia)
                            st.success("‚úÖ Atividade adicionada com sucesso!")
                            st.rerun()
                    else:
                        st.error("‚ö†Ô∏è Preencha todos os campos obrigat√≥rios (marcados com *)")

    def show_edit_activity_form():
        """Mostra o formul√°rio para editar atividades existentes."""
        st.markdown("---")
        with st.expander("‚úèÔ∏è Editar Atividades", expanded=False):
            if st.session_state.df_atividades.empty:
                st.info("Nenhuma atividade para editar. Adicione atividades ou habilite um novo m√™s.")
                return

            atividade_selecionada = st.selectbox(
                "Selecione a atividade para editar",
                st.session_state.df_atividades['Obrigacao'].unique()
            )

            atividade = st.session_state.df_atividades[
                st.session_state.df_atividades['Obrigacao'] == atividade_selecionada
            ].iloc[0]

            col1, col2 = st.columns(2)
            with col1:
                novo_status = st.selectbox(
                    "Novo Status",
                    ["Pendente", "Em Andamento", "Finalizado", "Fechado"],
                    index=["Pendente", "Em Andamento", "Finalizado", "Fechado"].index(atividade['Status'])
                )
            with col2:
                novo_prazo = st.date_input(
                    "Novo Prazo Final",
                    value=atividade['Prazo'].date() if pd.notna(atividade['Prazo']) else datetime.now().date()
                )

            if st.button("Atualizar Atividade"):
                updates = {}
                
                if novo_status != atividade['Status']:
                    updates['Status'] = novo_status
                    
                    if novo_status == "Em Andamento" and pd.isna(atividade['DataInicio']):
                        updates['DataInicio'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    elif novo_status != "Em Andamento" and pd.notna(atividade['DataInicio']):
                        updates['DataInicio'] = None
                    
                    if novo_status == "Finalizado":
                        updates['DataConclusao'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    elif novo_status != "Finalizado" and pd.notna(atividade['DataConclusao']):
                        updates['DataConclusao'] = None
                
                novo_prazo_dt = datetime.combine(novo_prazo, datetime.min.time())
                if pd.isna(atividade['Prazo']) or novo_prazo_dt != atividade['Prazo']:
                    updates['Prazo'] = novo_prazo_dt.strftime('%Y-%m-%d %H:%M:%S')
                
                if updates:
                    if update_activity_in_db(atividade['id'], updates):
                        st.session_state.df_atividades = load_data_from_db(st.session_state.mes_ano_referencia)
                        st.success("‚úÖ Atividade atualizada com sucesso!")
                        st.rerun()
                else:
                    st.info("Nenhuma altera√ß√£o detectada para atualizar.")

    def show_close_period_section():
        """Mostra a se√ß√£o para fechar o per√≠odo atual."""
        st.markdown("---")
        st.markdown('<div class="card"><h3>üóìÔ∏è Fechamento e Habilita√ß√£o de Per√≠odo</h3></div>', unsafe_allow_html=True)

        if st.session_state.df_atividades.empty:
            st.info("Nenhuma atividade para fechar. Habilite um m√™s primeiro.")
            return

        todas_finalizadas = all(st.session_state.df_atividades['Status'].isin(["Finalizado", "Fechado"]))

        if todas_finalizadas:
            st.success(f"üéâ Todas as atividades para {st.session_state.mes_ano_referencia} est√£o finalizadas ou fechadas!")
            
            if st.button("Fechar Per√≠odo e Habilitar Pr√≥ximo M√™s"):
                conn = create_connection()
                if conn:
                    try:
                        cursor = conn.cursor()
                        cursor.execute("""
                            UPDATE atividades
                            SET Status = 'Fechado'
                            WHERE MesAnoReferencia = ?
                        """, (st.session_state.mes_ano_referencia,))
                        conn.commit()
                    except sqlite3.Error as e:
                        st.error(f"Erro ao fechar per√≠odo: {e}")
                    finally:
                        conn.close()

                st.session_state.mes_ano_referencia = get_next_month_year(st.session_state.mes_ano_referencia)
                st.session_state.df_atividades = load_data_from_db(st.session_state.mes_ano_referencia)

                if st.session_state.df_atividades.empty:
                    atividades = load_initial_data_template()
                    for atividade in atividades:
                        prazo = calculate_deadline(atividade['Data Limite'], st.session_state.mes_ano_referencia)
                        atividade.update({
                            'Prazo': prazo.strftime('%Y-%m-%d %H:%M:%S') if prazo else None,
                            'MesAnoReferencia': st.session_state.mes_ano_referencia,
                            'Data In√≠cio': None,
                            'Data Conclus√£o': None
                        })
                    
                    conn = create_connection()
                    if conn:
                        try:
                            cursor = conn.cursor()
                            for atividade in atividades:
                                cursor.execute("""
                                    INSERT INTO atividades (
                                        Obrigacao, Descricao, Periodicidade, OrgaoResponsavel, DataLimite,
                                        Status, Dificuldade, Prazo, DataInicio, DataConclusao, MesAnoReferencia
                                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                                """, (
                                    atividade['Obriga√ß√£o'], atividade['Descri√ß√£o'], atividade['Periodicidade'],
                                    atividade['√ìrg√£o Respons√°vel'], atividade['Data Limite'], atividade['Status'],
                                    atividade['Dificuldade'], atividade['Prazo'], atividade['Data In√≠cio'],
                                    atividade['Data Conclus√£o'], atividade['MesAnoReferencia']
                                ))
                            conn.commit()
                        except sqlite3.Error as e:
                            st.error(f"Erro ao inserir atividades iniciais: {e}")
                        finally:
                            conn.close()
                    
                    st.session_state.df_atividades = load_data_from_db(st.session_state.mes_ano_referencia)
                    st.success("Atividades padr√£o habilitadas para o novo m√™s!")
                
                st.rerun()
        else:
            st.warning(f"Ainda h√° atividades pendentes ou em andamento para {st.session_state.mes_ano_referencia}. Finalize-as para fechar o per√≠odo.")

    # Inicializa√ß√£o
    create_table()
    initialize_session_state()

    # Habilitar m√™s se n√£o houver dados
    if st.session_state.df_atividades.empty:
        st.warning(f"N√£o h√° atividades cadastradas para {st.session_state.mes_ano_referencia}.")
        if st.button(f"Habilitar M√™s {st.session_state.mes_ano_referencia}"):
            atividades = load_initial_data_template()
            for atividade in atividades:
                prazo = calculate_deadline(atividade['Data Limite'], st.session_state.mes_ano_referencia)
                atividade.update({
                    'Prazo': prazo.strftime('%Y-%m-%d %H:%M:%S') if prazo else None,
                    'MesAnoReferencia': st.session_state.mes_ano_referencia,
                    'Data In√≠cio': None,
                    'Data Conclus√£o': None
                })
            
            conn = create_connection()
            if conn:
                try:
                    cursor = conn.cursor()
                    for atividade in atividades:
                        cursor.execute("""
                            INSERT INTO atividades (
                                Obrigacao, Descricao, Periodicidade, OrgaoResponsavel, DataLimite,
                                Status, Dificuldade, Prazo, DataInicio, DataConclusao, MesAnoReferencia
                            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        """, (
                            atividade['Obriga√ß√£o'], atividade['Descri√ß√£o'], atividade['Periodicidade'],
                            atividade['√ìrg√£o Respons√°vel'], atividade['Data Limite'], atividade['Status'],
                            atividade['Dificuldade'], atividade['Prazo'], atividade['Data In√≠cio'],
                            atividade['Data Conclus√£o'], atividade['MesAnoReferencia']
                        ))
                    conn.commit()
                except sqlite3.Error as e:
                    st.error(f"Erro ao inserir atividades iniciais: {e}")
                finally:
                    conn.close()
            
            st.session_state.df_atividades = load_data_from_db(st.session_state.mes_ano_referencia)
            st.success("Atividades padr√£o habilitadas com sucesso!")
            st.rerun()

    # Componentes da interface
    show_navigation()
    show_metrics()
    show_charts()
    show_activities_table()
    show_add_activity_form()
    show_edit_activity_form()
    show_close_period_section()

# =============================================
# FUN√á√ÉO PRINCIPAL
# =============================================

def main():
    # Mostrar tela inicial se nenhum m√≥dulo foi selecionado
    if 'modulo_selecionado' not in st.session_state:
        st.session_state.modulo_selecionado = None
    
    if st.session_state.modulo_selecionado is None:
        st.markdown("""
        <div class="welcome-container">
            <div class="welcome-message">
                Bem vindo ao sistema fiscal
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    # Menu de navega√ß√£o
    st.sidebar.title("Menu de Navega√ß√£o")
    opcao = st.sidebar.radio("Selecione o m√≥dulo:", 
                            ["In√≠cio", "Processador de arquivos TXT", "Lan√ßamentos EFD REINF", "Atividades Fiscais"])
    
    if opcao != "In√≠cio":
        st.session_state.modulo_selecionado = opcao
    
    # Mostrar o m√≥dulo selecionado
    if st.session_state.modulo_selecionado == "Processador de arquivos TXT":
        processador_txt()
    elif st.session_state.modulo_selecionado == "Lan√ßamentos EFD REINF":
        lancamentos_efd_reinf()
    elif st.session_state.modulo_selecionado == "Atividades Fiscais":
        atividades_fiscais()

if __name__ == "__main__":
    main()
