import streamlit as st
import sqlite3
from datetime import datetime, timedelta, date
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import random
from typing import List, Tuple, Optional
import io
import contextlib
import chardet
from io import BytesIO
import base64
import time
import xml.etree.ElementTree as ET
import os
import hashlib
import xml.dom.minidom
import traceback
from pathlib import Path
import numpy as np

# --- CONFIGURA√á√ÉO INICIAL ---
st.set_page_config(
    page_title="Sistema de Processamento",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Namespaces para CT-e
CTE_NAMESPACES = {
    'cte': 'http://www.portalfiscal.inf.br/cte'
}

# Inicializa√ß√£o do estado da sess√£o
if 'selected_xml' not in st.session_state:
    st.session_state.selected_xml = None
if 'cte_data' not in st.session_state:
    st.session_state.cte_data = None

# --- ANIMA√á√ïES DE CARREGAMENTO ---
def show_loading_animation(message="Processando..."):
    """Exibe uma anima√ß√£o de carregamento"""
    with st.spinner(message):
        progress_bar = st.progress(0)
        for i in range(100):
            time.sleep(0.01)
            progress_bar.progress(i + 1)
        progress_bar.empty()

def show_processing_animation(message="Analisando dados..."):
    """Exibe anima√ß√£o de processamento"""
    placeholder = st.empty()
    with placeholder.container():
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.info(f"‚è≥ {message}")
            spinner_placeholder = st.empty()
            spinner_chars = ["‚£æ", "‚£Ω", "‚£ª", "‚¢ø", "‚°ø", "‚£ü", "‚£Ø", "‚£∑"]
            for i in range(20):
                spinner_placeholder.markdown(f"<div style='text-align: center; font-size: 24px;'>{spinner_chars[i % 8]}</div>", unsafe_allow_html=True)
                time.sleep(0.1)
    placeholder.empty()

def show_success_animation(message="Conclu√≠do!"):
    """Exibe anima√ß√£o de sucesso"""
    success_placeholder = st.empty()
    with success_placeholder.container():
        st.success(f"‚úÖ {message}")
        time.sleep(1.5)
    success_placeholder.empty()

# --- FUN√á√ïES DO PROCESSADOR DE ARQUIVOS ---
def processador_txt():
    st.title("üìÑ Processador de Arquivos TXT")
    st.markdown("""
    <div class="card">
        Remova linhas indesejadas de arquivos TXT. Carregue seu arquivo e defina os padr√µes a serem removidos.
    </div>
    """, unsafe_allow_html=True)

    def detectar_encoding(conteudo):
        """Detecta o encoding do conte√∫do do arquivo"""
        resultado = chardet.detect(conteudo)
        return resultado['encoding']

    def processar_arquivo(conteudo, padroes):
        """
        Processa o conte√∫do do arquivo removendo linhas indesejadas e realizando substitui√ß√µes
        """
        try:
            substituicoes = {
                "IMPOSTO IMPORTACAO": "IMP IMPORT",
                "TAXA SICOMEX": "TX SISCOMEX",
                "FRETE INTERNACIONAL": "FRET INTER",
                "SEGURO INTERNACIONAL": "SEG INTERN"
            }
            
            encoding = detectar_encoding(conteudo)
            
            try:
                texto = conteudo.decode(encoding)
            except UnicodeDecodeError:
                texto = conteudo.decode('latin-1')
            
            linhas = texto.splitlines()
            linhas_processadas = []
            
            for linha in linhas:
                linha = linha.strip()
                if not any(padrao in linha for padrao in padroes):
                    for original, substituto in substituicoes.items():
                        linha = linha.replace(original, substituto)
                    linhas_processadas.append(linha)
            
            return "\n".join(linhas_processadas), len(linhas)
        
        except Exception as e:
            st.error(f"Erro ao processar o arquivo: {str(e)}")
            return None, 0

    # Padr√µes padr√£o para remo√ß√£o
    padroes_default = ["-------", "SPED EFD-ICMS/IPI"]
    
    # Upload do arquivo
    arquivo = st.file_uploader("Selecione o arquivo TXT", type=['txt'])
    
    # Op√ß√µes avan√ßadas
    with st.expander("‚öôÔ∏è Configura√ß√µes avan√ßadas", expanded=False):
        padroes_adicionais = st.text_input(
            "Padr√µes adicionais para remo√ß√£o (separados por v√≠rgula)",
            help="Exemplo: padr√£o1, padr√£o2, padr√£o3"
        )
        
        padroes = padroes_default + [
            p.strip() for p in padroes_adicionais.split(",") 
            if p.strip()
        ] if padroes_adicionais else padroes_default

    if arquivo is not None:
        if st.button("üîÑ Processar Arquivo TXT"):
            try:
                show_loading_animation("Analisando arquivo TXT...")
                conteudo = arquivo.read()
                show_processing_animation("Processando linhas...")
                resultado, total_linhas = processar_arquivo(conteudo, padroes)
                
                if resultado is not None:
                    show_success_animation("Arquivo processado com sucesso!")
                    
                    linhas_processadas = len(resultado.splitlines())
                    st.success(f"""
                    **Processamento conclu√≠do!**  
                    ‚úîÔ∏è Linhas originais: {total_linhas}  
                    ‚úîÔ∏è Linhas processadas: {linhas_processadas}  
                    ‚úîÔ∏è Linhas removidas: {total_linhas - linhas_processadas}
                    """)

                    st.subheader("Pr√©via do resultado")
                    st.text_area("Conte√∫do processado", resultado, height=300)

                    buffer = BytesIO()
                    buffer.write(resultado.encode('utf-8'))
                    buffer.seek(0)
                    
                    st.download_button(
                        label="‚¨áÔ∏è Baixar arquivo processado",
                        data=buffer,
                        file_name=f"processado_{arquivo.name}",
                        mime="text/plain"
                    )
            
            except Exception as e:
                st.error(f"Erro inesperado: {str(e)}")
                st.info("Tente novamente ou verifique o arquivo.")

# --- PROCESSADOR CT-E COM EXTRA√á√ÉO DO PESO BRUTO ---
class CTeProcessorDirect:
    def __init__(self):
        self.processed_data = []
    
    def extract_nfe_number_from_key(self, chave_acesso):
        """Extrai o n√∫mero da NF-e da chave de acesso"""
        if not chave_acesso or len(chave_acesso) != 44:
            return None
        
        try:
            numero_nfe = chave_acesso[25:34]
            return numero_nfe
        except Exception:
            return None
    
    def extract_peso_bruto(self, root):
        """Extrai o peso bruto do CT-e"""
        try:
            def find_text(element, xpath):
                try:
                    for prefix, uri in CTE_NAMESPACES.items():
                        full_xpath = xpath.replace('cte:', f'{{{uri}}}')
                        found = element.find(full_xpath)
                        if found is not None and found.text:
                            return found.text
                    
                    found = element.find(xpath.replace('cte:', ''))
                    if found is not None and found.text:
                        return found.text
                    return None
                except Exception:
                    return None
            
            # Busca por todas as tags infQ
            for prefix, uri in CTE_NAMESPACES.items():
                infQ_elements = root.findall(f'.//{{{uri}}}infQ')
                for infQ in infQ_elements:
                    tpMed = infQ.find(f'{{{uri}}}tpMed')
                    qCarga = infQ.find(f'{{{uri}}}qCarga')
                    
                    if (tpMed is not None and tpMed.text == 'PESO BRUTO' and 
                        qCarga is not None and qCarga.text):
                        return float(qCarga.text)
            
            # Tentativa alternativa sem namespace
            infQ_elements = root.findall('.//infQ')
            for infQ in infQ_elements:
                tpMed = infQ.find('tpMed')
                qCarga = infQ.find('qCarga')
                
                if (tpMed is not None and tpMed.text == 'PESO BRUTO' and 
                    qCarga is not None and qCarga.text):
                    return float(qCarga.text)
            
            return 0.0
            
        except Exception as e:
            st.warning(f"N√£o foi poss√≠vel extrair o peso bruto: {str(e)}")
            return 0.0
    
    def extract_cte_data(self, xml_content, filename):
        """Extrai dados espec√≠ficos do CT-e incluindo peso bruto"""
        try:
            root = ET.fromstring(xml_content)
            
            for prefix, uri in CTE_NAMESPACES.items():
                ET.register_namespace(prefix, uri)
            
            def find_text(element, xpath):
                try:
                    for prefix, uri in CTE_NAMESPACES.items():
                        full_xpath = xpath.replace('cte:', f'{{{uri}}}')
                        found = element.find(full_xpath)
                        if found is not None and found.text:
                            return found.text
                    
                    found = element.find(xpath.replace('cte:', ''))
                    if found is not None and found.text:
                        return found.text
                    return None
                except Exception:
                    return None
            
            # Extrai dados do CT-e
            nCT = find_text(root, './/cte:nCT')
            dhEmi = find_text(root, './/cte:dhEmi')
            cMunIni = find_text(root, './/cte:cMunIni')
            UFIni = find_text(root, './/cte:UFIni')
            cMunFim = find_text(root, './/cte:cMunFim')
            UFFim = find_text(root, './/cte:UFFim')
            emit_xNome = find_text(root, './/cte:emit/cte:xNome')
            vTPrest = find_text(root, './/cte:vTPrest')
            rem_xNome = find_text(root, './/cte:rem/cte:xNome')
            
            # Extrai dados do destinat√°rio
            dest_xNome = find_text(root, './/cte:dest/cte:xNome')
            dest_CNPJ = find_text(root, './/cte:dest/cte:CNPJ')
            dest_CPF = find_text(root, './/cte:dest/cte:CPF')
            
            documento_destinatario = dest_CNPJ or dest_CPF or 'N/A'
            
            # Extrai endere√ßo do destinat√°rio
            dest_xLgr = find_text(root, './/cte:dest/cte:enderDest/cte:xLgr')
            dest_nro = find_text(root, './/cte:dest/cte:enderDest/cte:nro')
            dest_xBairro = find_text(root, './/cte:dest/cte:enderDest/cte:xBairro')
            dest_cMun = find_text(root, './/cte:dest/cte:enderDest/cte:cMun')
            dest_xMun = find_text(root, './/cte:dest/cte:enderDest/cte:xMun')
            dest_CEP = find_text(root, './/cte:dest/cte:enderDest/cte:CEP')
            dest_UF = find_text(root, './/cte:dest/cte:enderDest/cte:UF')
            
            # Monta endere√ßo completo
            endereco_destinatario = ""
            if dest_xLgr:
                endereco_destinatario += f"{dest_xLgr}"
                if dest_nro:
                    endereco_destinatario += f", {dest_nro}"
                if dest_xBairro:
                    endereco_destinatario += f" - {dest_xBairro}"
                if dest_xMun:
                    endereco_destinatario += f", {dest_xMun}"
                if dest_UF:
                    endereco_destinatario += f"/{dest_UF}"
                if dest_CEP:
                    endereco_destinatario += f" - CEP: {dest_CEP}"
            
            if not endereco_destinatario:
                endereco_destinatario = "N/A"
            
            infNFe_chave = find_text(root, './/cte:infNFe/cte:chave')
            numero_nfe = self.extract_nfe_number_from_key(infNFe_chave) if infNFe_chave else None
            
            # EXTRAI O PESO BRUTO
            peso_bruto = self.extract_peso_bruto(root)
            
            # Formata data
            data_formatada = None
            if dhEmi:
                try:
                    try:
                        data_obj = datetime.strptime(dhEmi[:10], '%Y-%m-%d')
                    except:
                        try:
                            data_obj = datetime.strptime(dhEmi[:10], '%d/%m/%Y')
                        except:
                            data_obj = datetime.strptime(dhEmi[:10], '%d/%m/%y')
                    data_formatada = data_obj.strftime('%d/%m/%y')
                except:
                    data_formatada = dhEmi[:10]
            
            # Converte valor para decimal
            try:
                vTPrest = float(vTPrest) if vTPrest else 0.0
            except (ValueError, TypeError):
                vTPrest = 0.0
            
            return {
                'Arquivo': filename,
                'nCT': nCT or 'N/A',
                'Data Emiss√£o': data_formatada or dhEmi or 'N/A',
                'C√≥digo Munic√≠pio In√≠cio': cMunIni or 'N/A',
                'UF In√≠cio': UFIni or 'N/A',
                'C√≥digo Munic√≠pio Fim': cMunFim or 'N/A',
                'UF Fim': UFFim or 'N/A',
                'Emitente': emit_xNome or 'N/A',
                'Valor Presta√ß√£o': vTPrest,
                'Peso Bruto (kg)': peso_bruto,
                'Remetente': rem_xNome or 'N/A',
                'Destinat√°rio': dest_xNome or 'N/A',
                'Documento Destinat√°rio': documento_destinatario,
                'Endere√ßo Destinat√°rio': endereco_destinatario,
                'Munic√≠pio Destino': dest_xMun or 'N/A',
                'UF Destino': dest_UF or 'N/A',
                'Chave NFe': infNFe_chave or 'N/A',
                'N√∫mero NFe': numero_nfe or 'N/A',
                'Data Processamento': datetime.now().strftime('%d/%m/%Y %H:%M:%S')
            }
            
        except Exception as e:
            st.error(f"Erro ao extrair dados do CT-e {filename}: {str(e)}")
            return None
    
    def process_single_file(self, uploaded_file):
        """Processa um √∫nico arquivo XML de CT-e"""
        try:
            file_content = uploaded_file.getvalue()
            filename = uploaded_file.name
            
            if not filename.lower().endswith('.xml'):
                return False, "Arquivo n√£o √© XML"
            
            content_str = file_content.decode('utf-8', errors='ignore')
            if 'CTe' not in content_str and 'conhecimento' not in content_str.lower():
                return False, "Arquivo n√£o parece ser um CT-e"
            
            cte_data = self.extract_cte_data(content_str, filename)
            
            if cte_data:
                self.processed_data.append(cte_data)
                return True, f"CT-e {filename} processado com sucesso!"
            else:
                return False, f"Erro ao processar CT-e {filename}"
                
        except Exception as e:
            return False, f"Erro ao processar arquivo {filename}: {str(e)}"
    
    def process_multiple_files(self, uploaded_files):
        """Processa m√∫ltiplos arquivos XML de CT-e"""
        results = {
            'success': 0,
            'errors': 0,
            'messages': []
        }
        
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        for i, uploaded_file in enumerate(uploaded_files):
            status_text.text(f"Processando {i+1}/{len(uploaded_files)}: {uploaded_file.name}")
            progress_bar.progress((i + 1) / len(uploaded_files))
            
            success, message = self.process_single_file(uploaded_file)
            if success:
                results['success'] += 1
            else:
                results['errors'] += 1
            results['messages'].append(message)
        
        progress_bar.empty()
        status_text.empty()
        
        return results
    
    def get_dataframe(self):
        """Retorna os dados processados como DataFrame"""
        if self.processed_data:
            return pd.DataFrame(self.processed_data)
        return pd.DataFrame()
    
    def clear_data(self):
        """Limpa os dados processados"""
        self.processed_data = []

# --- FUN√á√ÉO PARA CRIAR LINHA DE TEND√äNCIA SIMPLES SEM STATSMODELS ---
def add_simple_trendline(fig, x, y):
    """Adiciona uma linha de tend√™ncia simples usando regress√£o linear b√°sica"""
    try:
        # Remove valores NaN
        mask = ~np.isnan(x) & ~np.isnan(y)
        x_clean = x[mask]
        y_clean = y[mask]
        
        if len(x_clean) > 1:
            # Regress√£o linear simples
            coefficients = np.polyfit(x_clean, y_clean, 1)
            polynomial = np.poly1d(coefficients)
            
            # Gera pontos para a linha de tend√™ncia
            x_trend = np.linspace(x_clean.min(), x_clean.max(), 100)
            y_trend = polynomial(x_trend)
            
            fig.add_trace(go.Scatter(
                x=x_trend, 
                y=y_trend,
                mode='lines',
                name='Linha de Tend√™ncia',
                line=dict(color='red', dash='dash'),
                opacity=0.7
            ))
    except Exception:
        # Se houver erro, simplesmente n√£o adiciona a linha de tend√™ncia
        pass

def processador_cte():
    """Interface para o sistema de CT-e com extra√ß√£o do peso bruto"""
    processor = CTeProcessorDirect()
    
    st.title("üöö Processador de CT-e para Power BI")
    st.markdown("### Processa arquivos XML de CT-e e gera planilha para an√°lise")
    
    with st.expander("‚ÑπÔ∏è Informa√ß√µes sobre a extra√ß√£o do Peso Bruto", expanded=False):
        st.markdown("""
        **Extra√ß√£o do Peso Bruto:**
        
        - O sistema extrai automaticamente o **Peso Bruto** do campo espec√≠fico no XML
        - Localiza√ß√£o: `<infQ><tpMed>PESO BRUTO</tpMed><qCarga>319.8000</qCarga></infQ>`
        - O peso √© convertido para quilogramas (kg) e inclu√≠do na planilha final
        """)
    
    tab1, tab2, tab3 = st.tabs(["üì§ Upload", "üëÄ Visualizar Dados", "üì• Exportar"])
    
    with tab1:
        st.header("Upload de CT-es")
        upload_option = st.radio("Selecione o tipo de upload:", 
                                ["Upload Individual", "Upload em Lote"])
        
        if upload_option == "Upload Individual":
            uploaded_file = st.file_uploader("Selecione um arquivo XML de CT-e", type=['xml'], key="single_cte")
            if uploaded_file and st.button("üìä Processar CT-e", key="process_single"):
                show_loading_animation("Analisando estrutura do XML...")
                show_processing_animation("Extraindo dados do CT-e...")
                
                success, message = processor.process_single_file(uploaded_file)
                if success:
                    show_success_animation("CT-e processado com sucesso!")
                    
                    df = processor.get_dataframe()
                    if not df.empty:
                        ultimo_cte = df.iloc[-1]
                        st.info(f"**Peso Bruto extra√≠do:** {ultimo_cte['Peso Bruto (kg)']} kg")
                else:
                    st.error(message)
        
        else:
            uploaded_files = st.file_uploader("Selecione m√∫ltiplos arquivos XML de CT-e", 
                                            type=['xml'], 
                                            accept_multiple_files=True,
                                            key="multiple_cte")
            if uploaded_files and st.button("üìä Processar Todos", key="process_multiple"):
                show_loading_animation(f"Iniciando processamento de {len(uploaded_files)} arquivos...")
                
                results = processor.process_multiple_files(uploaded_files)
                show_success_animation("Processamento em lote conclu√≠do!")
                
                st.success(f"""
                **Processamento conclu√≠do!**  
                ‚úÖ Sucessos: {results['success']}  
                ‚ùå Erros: {results['errors']}
                """)
                
                df = processor.get_dataframe()
                if not df.empty:
                    ctes_com_nfe = df[df['Chave NFe'] != 'N/A'].shape[0]
                    peso_total = df['Peso Bruto (kg)'].sum()
                    st.info(f"""
                    **Estat√≠sticas de extra√ß√£o:**
                    - CT-es com NF-e: {ctes_com_nfe}
                    - Peso bruto total: {peso_total:,.2f} kg
                    - Peso m√©dio por CT-e: {df['Peso Bruto (kg)'].mean():,.2f} kg
                    """)
                
                if results['errors'] > 0:
                    with st.expander("Ver mensagens detalhadas"):
                        for msg in results['messages']:
                            st.write(f"- {msg}")
        
        if st.button("üóëÔ∏è Limpar Dados Processados", type="secondary"):
            processor.clear_data()
            st.success("Dados limpos com sucesso!")
            time.sleep(1)
            st.rerun()
    
    with tab2:
        st.header("Dados Processados")
        df = processor.get_dataframe()
        
        if not df.empty:
            st.write(f"Total de CT-es processados: {len(df)}")
            
            # Filtros
            col1, col2, col3 = st.columns(3)
            with col1:
                uf_filter = st.multiselect("Filtrar por UF In√≠cio", options=df['UF In√≠cio'].unique())
            with col2:
                uf_destino_filter = st.multiselect("Filtrar por UF Destino", options=df['UF Destino'].unique())
            with col3:
                peso_filter = st.slider("Filtrar por Peso Bruto (kg)", 
                                      float(df['Peso Bruto (kg)'].min()), 
                                      float(df['Peso Bruto (kg)'].max()),
                                      (float(df['Peso Bruto (kg)'].min()), float(df['Peso Bruto (kg)'].max())))
            
            # Aplicar filtros
            filtered_df = df.copy()
            if uf_filter:
                filtered_df = filtered_df[filtered_df['UF In√≠cio'].isin(uf_filter)]
            if uf_destino_filter:
                filtered_df = filtered_df[filtered_df['UF Destino'].isin(uf_destino_filter)]
            filtered_df = filtered_df[
                (filtered_df['Peso Bruto (kg)'] >= peso_filter[0]) & 
                (filtered_df['Peso Bruto (kg)'] <= peso_filter[1])
            ]
            
            # Exibir dataframe
            colunas_principais = [
                'Arquivo', 'nCT', 'Data Emiss√£o', 'Emitente', 'Remetente', 
                'Destinat√°rio', 'UF In√≠cio', 'UF Destino', 'Peso Bruto (kg)', 'Valor Presta√ß√£o'
            ]
            
            st.dataframe(filtered_df[colunas_principais], use_container_width=True)
            
            with st.expander("üìã Ver todos os campos detalhados"):
                st.dataframe(filtered_df, use_container_width=True)
            
            # Estat√≠sticas
            st.subheader("üìà Estat√≠sticas")
            col1, col2, col3, col4 = st.columns(4)
            
            col1.metric("Total Valor Presta√ß√£o", f"R$ {filtered_df['Valor Presta√ß√£o'].sum():,.2f}")
            col2.metric("Peso Bruto Total", f"{filtered_df['Peso Bruto (kg)'].sum():,.2f} kg")
            col3.metric("M√©dia Peso/CT-e", f"{filtered_df['Peso Bruto (kg)'].mean():,.2f} kg")
            col4.metric("CT-es com NFe", f"{filtered_df[filtered_df['Chave NFe'] != 'N/A'].shape[0]}")
            
            if not filtered_df.empty:
                exemplo = filtered_df.iloc[0]
                st.info(f"**Exemplo de extra√ß√£o:** Peso Bruto = {exemplo['Peso Bruto (kg)']} kg")
            
            # Gr√°ficos - CORRIGIDO: sem depend√™ncia do statsmodels
            col_chart1, col_chart2 = st.columns(2)
            
            with col_chart1:
                st.subheader("üìä Distribui√ß√£o por Peso Bruto")
                if not filtered_df.empty:
                    fig_peso = px.histogram(
                        filtered_df, 
                        x='Peso Bruto (kg)',
                        title="Distribui√ß√£o dos CT-es por Peso Bruto",
                        nbins=20
                    )
                    st.plotly_chart(fig_peso, use_container_width=True)
            
            with col_chart2:
                st.subheader("üìà Rela√ß√£o Peso x Valor")
                if not filtered_df.empty:
                    # Gr√°fico de dispers√£o sem trendline problem√°tico
                    fig_relacao = px.scatter(
                        filtered_df,
                        x='Peso Bruto (kg)',
                        y='Valor Presta√ß√£o',
                        title="Rela√ß√£o entre Peso Bruto e Valor da Presta√ß√£o"
                    )
                    
                    # Adiciona linha de tend√™ncia simples se desejado
                    if st.checkbox("Mostrar linha de tend√™ncia", key="trendline"):
                        add_simple_trendline(fig_relacao, 
                                           filtered_df['Peso Bruto (kg)'].values, 
                                           filtered_df['Valor Presta√ß√£o'].values)
                    
                    st.plotly_chart(fig_relacao, use_container_width=True)
            
        else:
            st.info("Nenhum CT-e processado ainda. Fa√ßa upload de arquivos na aba 'Upload'.")
    
    with tab3:
        st.header("Exportar para Excel")
        df = processor.get_dataframe()
        
        if not df.empty:
            st.success(f"Pronto para exportar {len(df)} registros")
            
            export_option = st.radio("Formato de exporta√ß√£o:", 
                                   ["Excel (.xlsx)", "CSV (.csv)"])
            
            st.subheader("Selecionar Colunas para Exporta√ß√£o")
            todas_colunas = df.columns.tolist()
            colunas_selecionadas = st.multiselect(
                "Selecione as colunas para exportar:",
                options=todas_colunas,
                default=todas_colunas
            )
            
            df_export = df[colunas_selecionadas] if colunas_selecionadas else df
            
            if export_option == "Excel (.xlsx)":
                show_processing_animation("Gerando arquivo Excel...")
                
                output = BytesIO()
                with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                    df_export.to_excel(writer, sheet_name='Dados_CTe', index=False)
                
                output.seek(0)
                
                st.download_button(
                    label="üì• Baixar Planilha Excel",
                    data=output,
                    file_name="dados_cte.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
            
            else:
                show_processing_animation("Gerando arquivo CSV...")
                
                csv = df_export.to_csv(index=False).encode('utf-8')
                
                st.download_button(
                    label="üì• Baixar Arquivo CSV",
                    data=csv,
                    file_name="dados_cte.csv",
                    mime="text/csv"
                )
            
            with st.expander("üìã Pr√©via dos dados a serem exportados"):
                st.dataframe(df_export.head(10))
                
        else:
            st.warning("Nenhum dado dispon√≠vel para exporta√ß√£o.")

# --- CSS E CONFIGURA√á√ÉO DE ESTILO ---
def load_css():
    st.markdown("""
    <style>
        .cover-container {
            background: linear-gradient(135deg, #f5f7fa 0%, #e4e8ed 100%);
            padding: 3rem;
            border-radius: 12px;
            margin-bottom: 2rem;
            text-align: center;
        }
        .cover-logo {
            max-width: 300px;
            margin-bottom: 1.5rem;
        }
        .cover-title {
            font-size: 2.8rem;
            font-weight: 800;
            margin-bottom: 1rem;
            background: linear-gradient(90deg, #2c3e50, #3498db);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .cover-subtitle {
            font-size: 1.2rem;
            color: #7f8c8d;
            margin-bottom: 0;
        }
        .header {
            font-size: 1.8rem;
            font-weight: 700;
            margin: 1.5rem 0 1rem 0;
            padding-left: 10px;
            border-left: 5px solid #2c3e50;
        }
        .card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
            padding: 1.8rem;
            margin-bottom: 1.8rem;
        }
        .stButton>button {
            width: 100%;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .spinner {
            animation: spin 2s linear infinite;
            display: inline-block;
            font-size: 24px;
        }
    </style>
    """, unsafe_allow_html=True)

# --- APLICA√á√ÉO PRINCIPAL ---
def main():
    """Fun√ß√£o principal que gerencia o fluxo da aplica√ß√£o."""
    load_css()
    
    st.markdown("""
    <div class="cover-container">
        <img src="https://raw.githubusercontent.com/DaniloNs-creator/final/7ea6ab2a610ef8f0c11be3c34f046e7ff2cdfc6a/haefele_logo.png" class="cover-logo">
        <h1 class="cover-title">Sistema de Processamento de Arquivos</h1>
        <p class="cover-subtitle">Processamento de TXT e CT-e para an√°lise de dados</p>
    </div>
    """, unsafe_allow_html=True)
    
    tab1, tab2 = st.tabs(["üìÑ Processador TXT", "üöö Processador CT-e"])
    
    with tab1:
        processador_txt()
    
    with tab2:
        processador_cte()

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        st.error(f"Ocorreu um erro inesperado: {str(e)}")
        st.code(traceback.format_exc())